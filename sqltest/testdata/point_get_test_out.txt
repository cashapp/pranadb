-- we test various point lookups that cause a table scan with a range that selects only one row;

-- test with the MV having a varchar PK;
--create topic testtopic;
use test;
0 rows returned
create source raw_ledger_events(
	transaction_id varchar,
    customer_token varchar,
    amount bigint,
    currency_code varchar,
	occurred_at bigint,
	primary key (transaction_id)
) with (
	brokername = "testbroker",
	topicname = "testtopic",
	headerencoding = "stringbytes",
	keyencoding = "stringbytes",
	valueencoding = "json",
	columnselectors = (
		v0,
        v1,
		v2,
		v3,
		v4
	)
);
0 rows returned
--load data dataset_1;
create materialized view customer_balances as select customer_token, count(*), sum(amount) from raw_ledger_events group by customer_token;
0 rows returned
select * from customer_balances order by customer_token;
|customer_token|count(*)|sum(amount)|
|cust_0006|1|65343.000000000000000000000000000000|
|cust_0007|2|5556.000000000000000000000000000000|
|cust_0010|1|123.000000000000000000000000000000|
3 rows returned
-- the lookup here will result in a point lookup which boils down to a table scan with a range that selects only one row;
select * from customer_balances where customer_token='cust_0007';
|customer_token|count(*)|sum(amount)|
|cust_0007|2|5556.000000000000000000000000000000|
1 rows returned
drop materialized view customer_balances;
0 rows returned
drop source raw_ledger_events;
0 rows returned
--delete topic testtopic;

-- test with the MV having a bigint PK;
--create topic testtopic;
use test;
0 rows returned
create source raw_ledger_events(
	transaction_id varchar,
    customer_token bigint,
    amount bigint,
    currency_code varchar,
	occurred_at bigint,
	primary key (transaction_id)
) with (
	brokername = "testbroker",
	topicname = "testtopic",
	headerencoding = "stringbytes",
	keyencoding = "stringbytes",
	valueencoding = "json",
	columnselectors = (
		v0,
        v1,
		v2,
		v3,
		v4
	)
);
0 rows returned
--load data dataset_2;
create materialized view customer_balances as select customer_token, count(*), sum(amount) from raw_ledger_events group by customer_token;
0 rows returned
select * from customer_balances order by customer_token;
|customer_token|count(*)|sum(amount)|
|6|1|65343.000000000000000000000000000000|
|7|2|5556.000000000000000000000000000000|
|10|1|123.000000000000000000000000000000|
3 rows returned
-- the lookup here will result in a point lookup which boils down to a table scan with a range that selects only one row;
select * from customer_balances where customer_token=7;
|customer_token|count(*)|sum(amount)|
|7|2|5556.000000000000000000000000000000|
1 rows returned
drop materialized view customer_balances;
0 rows returned
drop source raw_ledger_events;
0 rows returned
--delete topic testtopic;

-- test with the MV having an INT PK;
--create topic testtopic;
use test;
0 rows returned
create source raw_ledger_events(
	transaction_id varchar,
    customer_token int,
    amount bigint,
    currency_code varchar,
	occurred_at bigint,
	primary key (transaction_id)
) with (
	brokername = "testbroker",
	topicname = "testtopic",
	headerencoding = "stringbytes",
	keyencoding = "stringbytes",
	valueencoding = "json",
	columnselectors = (
		v0,
        v1,
		v2,
		v3,
		v4
	)
);
0 rows returned
--load data dataset_2;
create materialized view customer_balances as select customer_token, count(*), sum(amount) from raw_ledger_events group by customer_token;
0 rows returned
select * from customer_balances order by customer_token;
|customer_token|count(*)|sum(amount)|
|6|1|65343.000000000000000000000000000000|
|7|2|5556.000000000000000000000000000000|
|10|1|123.000000000000000000000000000000|
3 rows returned
-- the lookup here will result in a point lookup which boils down to a table scan with a range that selects only one row;
select * from customer_balances where customer_token=7;
|customer_token|count(*)|sum(amount)|
|7|2|5556.000000000000000000000000000000|
1 rows returned
drop materialized view customer_balances;
0 rows returned
drop source raw_ledger_events;
0 rows returned
--delete topic testtopic;

-- test with the MV having an TINYINT PK;
--create topic testtopic;
use test;
0 rows returned
create source raw_ledger_events(
	transaction_id varchar,
    customer_token tinyint,
    amount bigint,
    currency_code varchar,
	occurred_at bigint,
	primary key (transaction_id)
) with (
	brokername = "testbroker",
	topicname = "testtopic",
	headerencoding = "stringbytes",
	keyencoding = "stringbytes",
	valueencoding = "json",
	columnselectors = (
		v0,
        v1,
		v2,
		v3,
		v4
	)
);
0 rows returned
--load data dataset_2;
create materialized view customer_balances as select customer_token, count(*), sum(amount) from raw_ledger_events group by customer_token;
0 rows returned
select * from customer_balances order by customer_token;
|customer_token|count(*)|sum(amount)|
|6|1|65343.000000000000000000000000000000|
|7|2|5556.000000000000000000000000000000|
|10|1|123.000000000000000000000000000000|
3 rows returned
-- the lookup here will result in a point lookup which boils down to a table scan with a range that selects only one row;
select * from customer_balances where customer_token=7;
|customer_token|count(*)|sum(amount)|
|7|2|5556.000000000000000000000000000000|
1 rows returned
drop materialized view customer_balances;
0 rows returned
drop source raw_ledger_events;
0 rows returned
--delete topic testtopic;

-- test with the MV having a DOUBLE PK;
--create topic testtopic;
use test;
0 rows returned
create source raw_ledger_events(
	transaction_id varchar,
    customer_token double,
    amount bigint,
    currency_code varchar,
	occurred_at bigint,
	primary key (transaction_id)
) with (
	brokername = "testbroker",
	topicname = "testtopic",
	headerencoding = "stringbytes",
	keyencoding = "stringbytes",
	valueencoding = "json",
	columnselectors = (
		v0,
        v1,
		v2,
		v3,
		v4
	)
);
0 rows returned
--load data dataset_3;
create materialized view customer_balances as select customer_token, count(*), sum(amount) from raw_ledger_events group by customer_token;
0 rows returned
select * from customer_balances order by customer_token;
|customer_token|count(*)|sum(amount)|
|6|1|65343.000000000000000000000000000000|
|7|2|5556.000000000000000000000000000000|
|10|1|123.000000000000000000000000000000|
3 rows returned
-- the lookup here will result in a point lookup which boils down to a table scan with a range that selects only one row;
select * from customer_balances where customer_token=7.0;
|customer_token|count(*)|sum(amount)|
|7|2|5556.000000000000000000000000000000|
1 rows returned
drop materialized view customer_balances;
0 rows returned
drop source raw_ledger_events;
0 rows returned
--delete topic testtopic;

-- test with the MV having a DECIMAL PK;
--create topic testtopic;
use test;
0 rows returned
create source raw_ledger_events(
	transaction_id varchar,
    customer_token decimal(10, 2),
    amount bigint,
    currency_code varchar,
	occurred_at bigint,
	primary key (transaction_id)
) with (
	brokername = "testbroker",
	topicname = "testtopic",
	headerencoding = "stringbytes",
	keyencoding = "stringbytes",
	valueencoding = "json",
	columnselectors = (
		v0,
        v1,
		v2,
		v3,
		v4
	)
);
0 rows returned
--load data dataset_4;
create materialized view customer_balances as select customer_token, count(*), sum(amount) from raw_ledger_events group by customer_token;
0 rows returned
select * from customer_balances order by customer_token;
|customer_token|count(*)|sum(amount)|
|6000.000000000000000000000000000000|1|65343.000000000000000000000000000000|
|7000.000000000000000000000000000000|2|5556.000000000000000000000000000000|
|10000.000000000000000000000000000000|1|123.000000000000000000000000000000|
3 rows returned
-- the lookup here will result in a point lookup which boils down to a table scan with a range that selects only one row;
select * from customer_balances where customer_token=7000.00;
|customer_token|count(*)|sum(amount)|
|7000.000000000000000000000000000000|2|5556.000000000000000000000000000000|
1 rows returned
drop materialized view customer_balances;
0 rows returned
drop source raw_ledger_events;
0 rows returned
--delete topic testtopic;
