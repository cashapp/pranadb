--local only;
-- This tests all the basic functions and operators we provide;
--create topic testtopic;
use test;
create source test_source_1(
    col0 bigint,
    col1 tinyint,
    col2 int,
    col3 double,
    col4 decimal(10, 2),
    col5 varchar,
    col6 timestamp(6),
    primary key (col0)
) with (
    brokername = "testbroker",
    topicname = "testtopic",
    headerencoding = "json",
    keyencoding = "json",
    valueencoding = "json",
    columnselectors = (
        meta("key").k0,
        v1,
        v2,
        v3,
        v4,
        v5,
        v6
    )
);

--load data dataset_1;

-- EQ;
select * from test_source_1 where col0 = 3;
select * from test_source_1 where col1 = 40;
select * from test_source_1 where col2 = 5000;
select * from test_source_1 where col3 = 3234.4321;
select * from test_source_1 where col4 = 22345678.99;
select * from test_source_1 where col5 = 'str9';
select * from test_source_1 where col6 = '2020-01-04 01:00:00.123456';

-- GE;
select * from test_source_1 where col0 >= 5 order by col0;
select * from test_source_1 where col1 >= 40 order by col0;
select * from test_source_1 where col2 >= 5000 order by col0;
select * from test_source_1 where col3 >= 3234.4321 order by col0;
select * from test_source_1 where col4 >= 22345678.99 order by col0;
select * from test_source_1 where col5 >= 'str9' order by col0;
select * from test_source_1 where col6 >= '2020-01-04 01:00:00.123456' order by col0;

-- GT;
select * from test_source_1 where col0 > 5 order by col0;
select * from test_source_1 where col1 > 40 order by col0;
select * from test_source_1 where col2 > 5000 order by col0;
select * from test_source_1 where col3 > 3234.4321 order by col0;
select * from test_source_1 where col4 > 22345678.99 order by col0;
select * from test_source_1 where col5 > 'str9' order by col0;
select * from test_source_1 where col6 > '2020-01-04 01:00:00.123456' order by col0;

-- LE;
select * from test_source_1 where col0 <= 5 order by col0;
select * from test_source_1 where col1 <= 40 order by col0;
select * from test_source_1 where col2 <= 5000 order by col0;
select * from test_source_1 where col3 <= 3234.4321 order by col0;
select * from test_source_1 where col4 <= 22345678.99 order by col0;
select * from test_source_1 where col5 <= 'str7' order by col0;
select * from test_source_1 where col6 <= '2020-01-04 01:00:00.123456' order by col0;

-- LT;
select * from test_source_1 where col0 < 5 order by col0;
select * from test_source_1 where col1 < 40 order by col0;
select * from test_source_1 where col2 < 5000 order by col0;
select * from test_source_1 where col3 < 3234.4321 order by col0;
select * from test_source_1 where col4 < 22345678.99 order by col0;
select * from test_source_1 where col5 < 'str7' order by col0;
select * from test_source_1 where col6 < '2020-01-04 01:00:00.123456' order by col0;

-- NE;
select * from test_source_1 where col0 <> 5 order by col0;
select * from test_source_1 where col1 <> 40 order by col0;
select * from test_source_1 where col2 <> 5000 order by col0;
select * from test_source_1 where col3 <> 3234.4321 order by col0;
select * from test_source_1 where col4 <> 22345678.99 order by col0;
select * from test_source_1 where col5 <> 'str7' order by col0;
select * from test_source_1 where col6 <> '2020-01-04 01:00:00.123456' order by col0;

-- IS NULL;
select * from test_source_1 where col1 is null order by col0;
select * from test_source_1 where col2 is null order by col0;
select * from test_source_1 where col3 is null order by col0;
select * from test_source_1 where col4 is null order by col0;
select * from test_source_1 where col5 is null order by col0;
select * from test_source_1 where col6 is null order by col0;

-- IS NOT NULL;
select * from test_source_1 where col1 is not null order by col0;
select * from test_source_1 where col2 is not null order by col0;
select * from test_source_1 where col3 is not null order by col0;
select * from test_source_1 where col4 is not null order by col0;
select * from test_source_1 where col5 is not null order by col0;
select * from test_source_1 where col6 is not null order by col0;

-- AND;
select * from test_source_1 where col1 > 30 and col2 <= 9000 order by col0;

-- OR;
select * from test_source_1 where col1 = 80 or col5 = 'str4' order by col0;

-- IF;
select col0, if(col0 > 4, "bigger", "smaller"),
if (col1 > 30, "bigger", "smaller"),
if (col2 > 7000, "bigger", "smaller"),
if (col3 = 6234.4321, "eq", "not eq"),
if (col4 <= 82345678.99, "less", "more"),
if (col5 > 'str3', 'fatter', 'thinner'),
if (col6 = '2020-01-03 01:00:00.123456', 'wibble', 'wobble')
from test_source_1 order by col0;

-- CASE;
select col0,
case
when col1 = 30 then "3 hundred"
when col1 = 50 then "5 hundred"
when col1 is null then "eeets null"
else "badgers"
end from test_source_1 order by col0;

-- IN;
select * from test_source_1 where col2 in (4000, 7000, 3000) order by col0;

--UNARY MINUS;
select -col0, -col1, -col2, -col3, -col4 from test_source_1 order by -col0;

--UNARY NOT;
select * from test_source_1 where not col1 = 400 order by col0;

--IFNULL;
select col0, ifnull(col1, 'eeeetz null!') from test_source_1 order by col0;

--LIKE;
--create topic testtopic2;
create source test_source_2(
    col0 bigint,
    col1 varchar,
    primary key (col0)
) with (
    brokername = "testbroker",
    topicname = "testtopic2",
    headerencoding = "json",
    keyencoding = "json",
    valueencoding = "json",
    columnselectors = (
        meta("key").k0,
        v1
    )
);

--load data dataset_2;

select * from test_source_2 where col1 like 'a%' order by col0;
select * from test_source_2 where col1 like '%r' order by col0;
select * from test_source_2 where col1 like '%ee%' order by col0;
select * from test_source_2 where col1 like '_e%' order by col0;
select * from test_source_2 where col1 like 'a_______%' order by col0;
select * from test_source_2 where col1 like 'a%s' order by col0;

-- Logic ops/functions;

--create topic testtopic3;
create source test_source_3(
    col0 bigint,
    col1 tinyint,
    col2 tinyint,
    primary key (col0)
) with (
    brokername = "testbroker",
    topicname = "testtopic3",
    headerencoding = "json",
    keyencoding = "json",
    valueencoding = "json",
    columnselectors = (
        meta("key").k0,
        v1,
        v2
    )
);

--load data dataset_3;

-- IS TRUE;
select * from test_source_3 where col1 is true;
select * from test_source_3 where col2 is true;

-- IS FALSE;
select * from test_source_3 where col1 is false;
select * from test_source_3 where col2 is false;

select * from test_source_3 where col1 and col2;
select * from test_source_3 where col1 or col2;
select * from test_source_3 where col1 xor col2;

select * from test_source_3 where not col1;

-- basic arithmetic;

-- ADD;

select col0 + 10 from test_source_1 order by col0;
select col1 + 10 from test_source_1 order by col0;
select col2 + 10 from test_source_1 order by col0;
select col3 + 100000.0001 from test_source_1 order by col0;
select col4 + 100000 from test_source_1 order by col0;

select col0 + col0 from test_source_1 order by col0;
select col1 + col1 from test_source_1 order by col0;
select col2 + col2 from test_source_1 order by col0;
select col3 + col3 from test_source_1 order by col0;
select col4 + col4 from test_source_1 order by col0;

select col0 + col1 + col2 + col3 + col4 from test_source_1 order by col0;

-- SUBTRACT;

select col0 - 10 from test_source_1 order by col0;
select col1 - 10 from test_source_1 order by col0;
select col2 - 10 from test_source_1 order by col0;
select col3 - 100000.0001 from test_source_1 order by col0;
select col4 - 100000 from test_source_1 order by col0;

select 2 * col0 - col0 from test_source_1 order by col0;
select 2 * col1 - col1 from test_source_1 order by col0;
select 2 * col2 - col2 from test_source_1 order by col0;
select 2 * col3 - col3 from test_source_1 order by col0;
select 2 * col4 - col4 from test_source_1 order by col0;

select col4 - col3 - col2 - col1 - col0 from test_source_1 order by col0;

-- MULTIPLY;

select col0 * 2 from test_source_1 order by col0;
select col1 * 2 from test_source_1 order by col0;
select col2 * 2 from test_source_1 order by col0;
select col3 * 2 from test_source_1 order by col0;
select col4 * 2 from test_source_1 order by col0;

select col0 * col1 from test_source_1 order by col0;

-- DIVIDE;

select col2 / col0 from test_source_1 order by col0;

select col0 / 2, col1 / 4, col2 / 2, col3 / 2, col4 / 2 from test_source_1 order by col0;

-- INTEGER DIVIDE;

select col0 div 2, col1 div 4, col2 div 2, col3 div 2, col4 div 2 from test_source_1 order by col0;

-- MOD;

select col0 mod 2 from test_source_1 order by col0;

select col0 % 2 from test_source_1 order by col0;

select mod(col0, 2) from test_source_1 order by col0;

-- Bitwise ops;

--create topic testtopic4;
create source test_source_4(
    col0 bigint,
    col1 tinyint,
    col2 int,
    col3 bigint,
    primary key (col0)
) with (
    brokername = "testbroker",
    topicname = "testtopic4",
    headerencoding = "json",
    keyencoding = "json",
    valueencoding = "json",
    columnselectors = (
        meta("key").k0,
        v1,
        v2,
        v3
    )
);

--load data dataset_4;

-- BITWISE AND;

select col1 & 113, col2 & 45284648, col3 & 6983586634234 from test_source_4 order by col0;

-- BITWISE OR;

select col1 | 113, col2 | 45284648, col3 | 6983586634234 from test_source_4 order by col0;

-- BITWISE XOR;

select col1 ^ 113, col2 ^ 45284648, col3 ^ 6983586634234 from test_source_4 order by col0;

-- BITWISE NEGATION;

select ~col1, ~col2, ~col3 from test_source_4 order by col0;

-- BITWISE LEFT SHIFT;

select col1 << 1, col2 << 2, col3 << 2 from test_source_4 order by col0;

-- BITWISE RIGHT SHIFT;

select col1 >> 1, col2 >> 2, col3 >> 3 from test_source_4 order by col0;

-- COALESCE;

select col0, coalesce(null, null, null, 'foo') from test_source_1 order by col0;
select col0, coalesce(col1, col2, col3, col4) from test_source_1 order by col0;

-- GREATEST / LEAST;

select col0, greatest(col1, col2, col3, col4), least(col1, col2, col3, col4), greatest(null, 1), least(null, 1), greatest(300, 200), least(300, 200) from test_source_1 order by col0;

-- INTERVAL;

select col0, interval(85, 1, 75, 17, 30,56, 175) from test_source_1 order by col0;

drop source test_source_4;
drop source test_source_3;
drop source test_source_2;
drop source test_source_1;

--delete topic testtopic4;
--delete topic testtopic3;
--delete topic testtopic2;
--delete topic testtopic;