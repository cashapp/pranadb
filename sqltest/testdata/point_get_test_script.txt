-- we test various point lookups that cause a table scan with a range that selects only one row;

-- test with the MV having a varchar PK;
--create topic testtopic;
use test;
create source raw_ledger_events(
	transaction_id varchar,
    customer_token varchar,
    amount bigint,
    currency_code varchar,
	occurred_at bigint,
	primary key (transaction_id)
) with (
	brokername = "testbroker",
	topicname = "testtopic",
	headerencoding = "stringbytes",
	keyencoding = "stringbytes",
	valueencoding = "json",
	columnselectors = (
		v0,
        v1,
		v2,
		v3,
		v4
	)
);
--load data dataset_1;
create materialized view customer_balances as select customer_token, count(*), sum(amount) from raw_ledger_events group by customer_token;
select * from customer_balances order by customer_token;
-- the lookup here will result in a point lookup which boils down to a table scan with a range that selects only one row;
select * from customer_balances where customer_token='cust_0007';
-- multiple point gets;
select * from customer_balances where customer_token in ('cust_0010','cust_0007') order by customer_token;
select * from customer_balances where customer_token = 'cust_0010' or customer_token = 'cust_0007' order by customer_token;
drop materialized view customer_balances;
drop source raw_ledger_events;
--delete topic testtopic;

-- test with the MV having a bigint PK;
--create topic testtopic;
use test;
create source raw_ledger_events(
	transaction_id varchar,
    customer_token bigint,
    amount bigint,
    currency_code varchar,
	occurred_at bigint,
	primary key (transaction_id)
) with (
	brokername = "testbroker",
	topicname = "testtopic",
	headerencoding = "stringbytes",
	keyencoding = "stringbytes",
	valueencoding = "json",
	columnselectors = (
		v0,
        v1,
		v2,
		v3,
		v4
	)
);
--load data dataset_2;
create materialized view customer_balances as select customer_token, count(*), sum(amount) from raw_ledger_events group by customer_token;
select * from customer_balances order by customer_token;
-- the lookup here will result in a point lookup which boils down to a table scan with a range that selects only one row;
select * from customer_balances where customer_token=7;
-- multiple point gets;
select * from customer_balances where customer_token in (10,7) order by customer_token;
select * from customer_balances where customer_token = 10 or customer_token = 7 order by customer_token;
drop materialized view customer_balances;
drop source raw_ledger_events;
--delete topic testtopic;

-- test with the MV having an INT PK;
--create topic testtopic;
use test;
create source raw_ledger_events(
	transaction_id varchar,
    customer_token int,
    amount bigint,
    currency_code varchar,
	occurred_at bigint,
	primary key (transaction_id)
) with (
	brokername = "testbroker",
	topicname = "testtopic",
	headerencoding = "stringbytes",
	keyencoding = "stringbytes",
	valueencoding = "json",
	columnselectors = (
		v0,
        v1,
		v2,
		v3,
		v4
	)
);
--load data dataset_2;
create materialized view customer_balances as select customer_token, count(*), sum(amount) from raw_ledger_events group by customer_token;
select * from customer_balances order by customer_token;
-- the lookup here will result in a point lookup which boils down to a table scan with a range that selects only one row;
select * from customer_balances where customer_token=7;
-- multiple point gets;
select * from customer_balances where customer_token in (10,7) order by customer_token;
select * from customer_balances where customer_token = 10 or customer_token = 7 order by customer_token;
drop materialized view customer_balances;
drop source raw_ledger_events;
--delete topic testtopic;

-- test with the MV having an TINYINT PK;
--create topic testtopic;
use test;
create source raw_ledger_events(
	transaction_id varchar,
    customer_token tinyint,
    amount bigint,
    currency_code varchar,
	occurred_at bigint,
	primary key (transaction_id)
) with (
	brokername = "testbroker",
	topicname = "testtopic",
	headerencoding = "stringbytes",
	keyencoding = "stringbytes",
	valueencoding = "json",
	columnselectors = (
		v0,
        v1,
		v2,
		v3,
		v4
	)
);
--load data dataset_2;
create materialized view customer_balances as select customer_token, count(*), sum(amount) from raw_ledger_events group by customer_token;
select * from customer_balances order by customer_token;
-- the lookup here will result in a point lookup which boils down to a table scan with a range that selects only one row;
select * from customer_balances where customer_token=7;
-- multiple point gets;
select * from customer_balances where customer_token in (10,7) order by customer_token;
select * from customer_balances where customer_token = 10 or customer_token = 7 order by customer_token;
drop materialized view customer_balances;
drop source raw_ledger_events;
--delete topic testtopic;

-- test with the MV having a DOUBLE PK;
--create topic testtopic;
use test;
create source raw_ledger_events(
	transaction_id varchar,
    customer_token double,
    amount bigint,
    currency_code varchar,
	occurred_at bigint,
	primary key (transaction_id)
) with (
	brokername = "testbroker",
	topicname = "testtopic",
	headerencoding = "stringbytes",
	keyencoding = "stringbytes",
	valueencoding = "json",
	columnselectors = (
		v0,
        v1,
		v2,
		v3,
		v4
	)
);
--load data dataset_3;
create materialized view customer_balances as select customer_token, count(*), sum(amount) from raw_ledger_events group by customer_token;
select * from customer_balances order by customer_token;
-- the lookup here will result in a point lookup which boils down to a table scan with a range that selects only one row;
select * from customer_balances where customer_token=7.0;
-- multiple point gets;
select * from customer_balances where customer_token in (10.0,7.0) order by customer_token;
select * from customer_balances where customer_token = 10.0 or customer_token = 7.0 order by customer_token;
drop materialized view customer_balances;
drop source raw_ledger_events;
--delete topic testtopic;

-- test with the MV having a DECIMAL PK;
--create topic testtopic;
use test;
create source raw_ledger_events(
	transaction_id varchar,
    customer_token decimal(10, 2),
    amount bigint,
    currency_code varchar,
	occurred_at bigint,
	primary key (transaction_id)
) with (
	brokername = "testbroker",
	topicname = "testtopic",
	headerencoding = "stringbytes",
	keyencoding = "stringbytes",
	valueencoding = "json",
	columnselectors = (
		v0,
        v1,
		v2,
		v3,
		v4
	)
);
--load data dataset_4;
create materialized view customer_balances as select customer_token, count(*), sum(amount) from raw_ledger_events group by customer_token;
select * from customer_balances order by customer_token;
-- the lookup here will result in a point lookup which boils down to a table scan with a range that selects only one row;
select * from customer_balances where customer_token=7000.00;
-- multiple point gets;
select * from customer_balances where customer_token in (10000,7000) order by customer_token;
select * from customer_balances where customer_token = 10000 or customer_token = 7000 order by customer_token;
drop materialized view customer_balances;
drop source raw_ledger_events;
--delete topic testtopic;

-- test with the MV having a TIMESTAMP(6) PK;
--create topic testtopic;
use test;
create source raw_ledger_events(
	transaction_id varchar,
    customer_token timestamp(6),
    amount bigint,
    currency_code varchar,
	occurred_at bigint,
	primary key (transaction_id)
) with (
	brokername = "testbroker",
	topicname = "testtopic",
	headerencoding = "stringbytes",
	keyencoding = "stringbytes",
	valueencoding = "json",
	columnselectors = (
		v0,
        v1,
		v2,
		v3,
		v4
	)
);
--load data dataset_5;
create materialized view customer_balances as select customer_token, count(*), sum(amount) from raw_ledger_events group by customer_token;
select * from customer_balances order by customer_token;
-- the lookup here will result in a point lookup which boils down to a table scan with a range that selects only one row;
select * from customer_balances where customer_token='2020-01-07 21:11:06.643534';
-- multiple point gets;
select * from customer_balances where customer_token in ('2020-01-07 21:11:06.643534','2020-01-07 02:06:06.646966') order by customer_token;
select * from customer_balances where customer_token = '2020-01-07 21:11:06.643534' or customer_token = '2020-01-07 02:06:06.646966' order by customer_token;
drop materialized view customer_balances;
drop source raw_ledger_events;
--delete topic testtopic;

-- test with the MV having a TIMESTAMP PK;
--create topic testtopic;
use test;
create source raw_ledger_events(
	transaction_id varchar,
    customer_token timestamp,
    amount bigint,
    currency_code varchar,
	occurred_at bigint,
	primary key (transaction_id)
) with (
	brokername = "testbroker",
	topicname = "testtopic",
	headerencoding = "stringbytes",
	keyencoding = "stringbytes",
	valueencoding = "json",
	columnselectors = (
		v0,
        v1,
		v2,
		v3,
		v4
	)
);
--load data dataset_6;
create materialized view customer_balances as select customer_token, count(*), sum(amount) from raw_ledger_events group by customer_token;
select * from customer_balances order by customer_token;
-- the lookup here will result in a point lookup which boils down to a table scan with a range that selects only one row;
select * from customer_balances where customer_token='2020-01-07 21:11:07';
-- multiple point gets;
select * from customer_balances where customer_token in ('2020-01-07 21:11:07','2020-01-07 02:06:06') order by customer_token;
select * from customer_balances where customer_token = '2020-01-07 21:11:07' or customer_token = '2020-01-07 02:06:06' order by customer_token;
drop materialized view customer_balances;
drop source raw_ledger_events;
--delete topic testtopic;

-- test with the MV having a Composite PK;
--create topic testtopic;
set max_line_width 250;
use test;
create source raw_ledger_events(
	transaction_id varchar,
    customer_token decimal(10, 2),
    customer_token2 tinyint,
    customer_token3 int,
    customer_token4 bigint,
    customer_token5 double,
    customer_token6 varchar,
    amount bigint,
    currency_code varchar,
	occurred_at bigint,
	primary key (transaction_id)
) with (
	brokername = "testbroker",
	topicname = "testtopic",
	headerencoding = "stringbytes",
	keyencoding = "stringbytes",
	valueencoding = "json",
	columnselectors = (
		v0,
        v1,
		v2,
		v3,
		v4,
		v5,
		v6,
		v7,
		v8,
		v9
	)
);
--load data dataset_7;
create materialized view customer_balances as select customer_token, customer_token2, customer_token3, customer_token4, customer_token5, customer_token6, count(*), sum(amount)
from raw_ledger_events group by customer_token, customer_token2, customer_token3, customer_token4, customer_token5, customer_token6;
select * from customer_balances order by customer_token, customer_token2, customer_token3, customer_token4, customer_token5;
-- the lookup here will result in a point lookup which boils down to a table scan with a range that selects only one row;
select * from customer_balances where customer_token=7000.00 and customer_token2=1 and customer_token3=100 and customer_token4=1000 and customer_token5=1.23 and customer_token6='foo';
drop materialized view customer_balances;
drop source raw_ledger_events;
--delete topic testtopic;