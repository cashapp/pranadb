// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.17.3
// source: squareup/cash/pranadb/service/v1/service.proto

package service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	descriptorpb "google.golang.org/protobuf/types/descriptorpb"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ColumnType int32

const (
	ColumnType_COLUMN_TYPE_UNSPECIFIED ColumnType = 0
	ColumnType_COLUMN_TYPE_TINY_INT    ColumnType = 1
	ColumnType_COLUMN_TYPE_INT         ColumnType = 2
	ColumnType_COLUMN_TYPE_BIG_INT     ColumnType = 3
	ColumnType_COLUMN_TYPE_DOUBLE      ColumnType = 4
	ColumnType_COLUMN_TYPE_DECIMAL     ColumnType = 5
	ColumnType_COLUMN_TYPE_VARCHAR     ColumnType = 6
	ColumnType_COLUMN_TYPE_TIMESTAMP   ColumnType = 7
)

// Enum value maps for ColumnType.
var (
	ColumnType_name = map[int32]string{
		0: "COLUMN_TYPE_UNSPECIFIED",
		1: "COLUMN_TYPE_TINY_INT",
		2: "COLUMN_TYPE_INT",
		3: "COLUMN_TYPE_BIG_INT",
		4: "COLUMN_TYPE_DOUBLE",
		5: "COLUMN_TYPE_DECIMAL",
		6: "COLUMN_TYPE_VARCHAR",
		7: "COLUMN_TYPE_TIMESTAMP",
	}
	ColumnType_value = map[string]int32{
		"COLUMN_TYPE_UNSPECIFIED": 0,
		"COLUMN_TYPE_TINY_INT":    1,
		"COLUMN_TYPE_INT":         2,
		"COLUMN_TYPE_BIG_INT":     3,
		"COLUMN_TYPE_DOUBLE":      4,
		"COLUMN_TYPE_DECIMAL":     5,
		"COLUMN_TYPE_VARCHAR":     6,
		"COLUMN_TYPE_TIMESTAMP":   7,
	}
)

func (x ColumnType) Enum() *ColumnType {
	p := new(ColumnType)
	*p = x
	return p
}

func (x ColumnType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ColumnType) Descriptor() protoreflect.EnumDescriptor {
	return file_squareup_cash_pranadb_service_v1_service_proto_enumTypes[0].Descriptor()
}

func (ColumnType) Type() protoreflect.EnumType {
	return &file_squareup_cash_pranadb_service_v1_service_proto_enumTypes[0]
}

func (x ColumnType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ColumnType.Descriptor instead.
func (ColumnType) EnumDescriptor() ([]byte, []int) {
	return file_squareup_cash_pranadb_service_v1_service_proto_rawDescGZIP(), []int{0}
}

type DecimalParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DecimalPrecision uint32 `protobuf:"varint,1,opt,name=decimal_precision,json=decimalPrecision,proto3" json:"decimal_precision,omitempty"`
	DecimalScale     uint32 `protobuf:"varint,2,opt,name=decimal_scale,json=decimalScale,proto3" json:"decimal_scale,omitempty"`
}

func (x *DecimalParams) Reset() {
	*x = DecimalParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_squareup_cash_pranadb_service_v1_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DecimalParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DecimalParams) ProtoMessage() {}

func (x *DecimalParams) ProtoReflect() protoreflect.Message {
	mi := &file_squareup_cash_pranadb_service_v1_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DecimalParams.ProtoReflect.Descriptor instead.
func (*DecimalParams) Descriptor() ([]byte, []int) {
	return file_squareup_cash_pranadb_service_v1_service_proto_rawDescGZIP(), []int{0}
}

func (x *DecimalParams) GetDecimalPrecision() uint32 {
	if x != nil {
		return x.DecimalPrecision
	}
	return 0
}

func (x *DecimalParams) GetDecimalScale() uint32 {
	if x != nil {
		return x.DecimalScale
	}
	return 0
}

type TimestampParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fsp uint32 `protobuf:"varint,1,opt,name=fsp,proto3" json:"fsp,omitempty"`
}

func (x *TimestampParams) Reset() {
	*x = TimestampParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_squareup_cash_pranadb_service_v1_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TimestampParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TimestampParams) ProtoMessage() {}

func (x *TimestampParams) ProtoReflect() protoreflect.Message {
	mi := &file_squareup_cash_pranadb_service_v1_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TimestampParams.ProtoReflect.Descriptor instead.
func (*TimestampParams) Descriptor() ([]byte, []int) {
	return file_squareup_cash_pranadb_service_v1_service_proto_rawDescGZIP(), []int{1}
}

func (x *TimestampParams) GetFsp() uint32 {
	if x != nil {
		return x.Fsp
	}
	return 0
}

type Column struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name          string         `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Type          ColumnType     `protobuf:"varint,2,opt,name=type,proto3,enum=squareup.cash.pranadb.service.v1.ColumnType" json:"type,omitempty"`
	DecimalParams *DecimalParams `protobuf:"bytes,3,opt,name=decimal_params,json=decimalParams,proto3,oneof" json:"decimal_params,omitempty"`
}

func (x *Column) Reset() {
	*x = Column{}
	if protoimpl.UnsafeEnabled {
		mi := &file_squareup_cash_pranadb_service_v1_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Column) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Column) ProtoMessage() {}

func (x *Column) ProtoReflect() protoreflect.Message {
	mi := &file_squareup_cash_pranadb_service_v1_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Column.ProtoReflect.Descriptor instead.
func (*Column) Descriptor() ([]byte, []int) {
	return file_squareup_cash_pranadb_service_v1_service_proto_rawDescGZIP(), []int{2}
}

func (x *Column) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Column) GetType() ColumnType {
	if x != nil {
		return x.Type
	}
	return ColumnType_COLUMN_TYPE_UNSPECIFIED
}

func (x *Column) GetDecimalParams() *DecimalParams {
	if x != nil {
		return x.DecimalParams
	}
	return nil
}

type ExecuteStatementRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Schema string `protobuf:"bytes,1,opt,name=schema,proto3" json:"schema,omitempty"`
	// Types that are assignable to Statement:
	//	*ExecuteStatementRequest_Name
	//	*ExecuteStatementRequest_Sql
	Statement isExecuteStatementRequest_Statement `protobuf_oneof:"statement"`
	BatchSize int32                               `protobuf:"varint,4,opt,name=batch_size,json=batchSize,proto3" json:"batch_size,omitempty"`
	Args      []*Arg                              `protobuf:"bytes,5,rep,name=args,proto3" json:"args,omitempty"`
}

func (x *ExecuteStatementRequest) Reset() {
	*x = ExecuteStatementRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_squareup_cash_pranadb_service_v1_service_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecuteStatementRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecuteStatementRequest) ProtoMessage() {}

func (x *ExecuteStatementRequest) ProtoReflect() protoreflect.Message {
	mi := &file_squareup_cash_pranadb_service_v1_service_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecuteStatementRequest.ProtoReflect.Descriptor instead.
func (*ExecuteStatementRequest) Descriptor() ([]byte, []int) {
	return file_squareup_cash_pranadb_service_v1_service_proto_rawDescGZIP(), []int{3}
}

func (x *ExecuteStatementRequest) GetSchema() string {
	if x != nil {
		return x.Schema
	}
	return ""
}

func (m *ExecuteStatementRequest) GetStatement() isExecuteStatementRequest_Statement {
	if m != nil {
		return m.Statement
	}
	return nil
}

func (x *ExecuteStatementRequest) GetName() string {
	if x, ok := x.GetStatement().(*ExecuteStatementRequest_Name); ok {
		return x.Name
	}
	return ""
}

func (x *ExecuteStatementRequest) GetSql() string {
	if x, ok := x.GetStatement().(*ExecuteStatementRequest_Sql); ok {
		return x.Sql
	}
	return ""
}

func (x *ExecuteStatementRequest) GetBatchSize() int32 {
	if x != nil {
		return x.BatchSize
	}
	return 0
}

func (x *ExecuteStatementRequest) GetArgs() []*Arg {
	if x != nil {
		return x.Args
	}
	return nil
}

type isExecuteStatementRequest_Statement interface {
	isExecuteStatementRequest_Statement()
}

type ExecuteStatementRequest_Name struct {
	Name string `protobuf:"bytes,2,opt,name=name,proto3,oneof"`
}

type ExecuteStatementRequest_Sql struct {
	Sql string `protobuf:"bytes,3,opt,name=sql,proto3,oneof"`
}

func (*ExecuteStatementRequest_Name) isExecuteStatementRequest_Statement() {}

func (*ExecuteStatementRequest_Sql) isExecuteStatementRequest_Statement() {}

type Arg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type            ColumnType       `protobuf:"varint,1,opt,name=type,proto3,enum=squareup.cash.pranadb.service.v1.ColumnType" json:"type,omitempty"`
	Value           *ArgValue        `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	DecimalParams   *DecimalParams   `protobuf:"bytes,3,opt,name=decimal_params,json=decimalParams,proto3,oneof" json:"decimal_params,omitempty"`
	TimestampParans *TimestampParams `protobuf:"bytes,4,opt,name=timestamp_parans,json=timestampParans,proto3,oneof" json:"timestamp_parans,omitempty"`
}

func (x *Arg) Reset() {
	*x = Arg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_squareup_cash_pranadb_service_v1_service_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Arg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Arg) ProtoMessage() {}

func (x *Arg) ProtoReflect() protoreflect.Message {
	mi := &file_squareup_cash_pranadb_service_v1_service_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Arg.ProtoReflect.Descriptor instead.
func (*Arg) Descriptor() ([]byte, []int) {
	return file_squareup_cash_pranadb_service_v1_service_proto_rawDescGZIP(), []int{4}
}

func (x *Arg) GetType() ColumnType {
	if x != nil {
		return x.Type
	}
	return ColumnType_COLUMN_TYPE_UNSPECIFIED
}

func (x *Arg) GetValue() *ArgValue {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *Arg) GetDecimalParams() *DecimalParams {
	if x != nil {
		return x.DecimalParams
	}
	return nil
}

func (x *Arg) GetTimestampParans() *TimestampParams {
	if x != nil {
		return x.TimestampParans
	}
	return nil
}

type ArgValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Value:
	//	*ArgValue_IntValue
	//	*ArgValue_FloatValue
	//	*ArgValue_StringValue
	//	*ArgValue_DecimalValue
	//	*ArgValue_TimestampValue
	Value isArgValue_Value `protobuf_oneof:"value"`
}

func (x *ArgValue) Reset() {
	*x = ArgValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_squareup_cash_pranadb_service_v1_service_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ArgValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArgValue) ProtoMessage() {}

func (x *ArgValue) ProtoReflect() protoreflect.Message {
	mi := &file_squareup_cash_pranadb_service_v1_service_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArgValue.ProtoReflect.Descriptor instead.
func (*ArgValue) Descriptor() ([]byte, []int) {
	return file_squareup_cash_pranadb_service_v1_service_proto_rawDescGZIP(), []int{5}
}

func (m *ArgValue) GetValue() isArgValue_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *ArgValue) GetIntValue() int64 {
	if x, ok := x.GetValue().(*ArgValue_IntValue); ok {
		return x.IntValue
	}
	return 0
}

func (x *ArgValue) GetFloatValue() float64 {
	if x, ok := x.GetValue().(*ArgValue_FloatValue); ok {
		return x.FloatValue
	}
	return 0
}

func (x *ArgValue) GetStringValue() string {
	if x, ok := x.GetValue().(*ArgValue_StringValue); ok {
		return x.StringValue
	}
	return ""
}

func (x *ArgValue) GetDecimalValue() string {
	if x, ok := x.GetValue().(*ArgValue_DecimalValue); ok {
		return x.DecimalValue
	}
	return ""
}

func (x *ArgValue) GetTimestampValue() string {
	if x, ok := x.GetValue().(*ArgValue_TimestampValue); ok {
		return x.TimestampValue
	}
	return ""
}

type isArgValue_Value interface {
	isArgValue_Value()
}

type ArgValue_IntValue struct {
	IntValue int64 `protobuf:"varint,1,opt,name=int_value,json=intValue,proto3,oneof"`
}

type ArgValue_FloatValue struct {
	FloatValue float64 `protobuf:"fixed64,2,opt,name=float_value,json=floatValue,proto3,oneof"`
}

type ArgValue_StringValue struct {
	StringValue string `protobuf:"bytes,3,opt,name=string_value,json=stringValue,proto3,oneof"`
}

type ArgValue_DecimalValue struct {
	DecimalValue string `protobuf:"bytes,4,opt,name=decimal_value,json=decimalValue,proto3,oneof"`
}

type ArgValue_TimestampValue struct {
	TimestampValue string `protobuf:"bytes,5,opt,name=timestamp_value,json=timestampValue,proto3,oneof"`
}

func (*ArgValue_IntValue) isArgValue_Value() {}

func (*ArgValue_FloatValue) isArgValue_Value() {}

func (*ArgValue_StringValue) isArgValue_Value() {}

func (*ArgValue_DecimalValue) isArgValue_Value() {}

func (*ArgValue_TimestampValue) isArgValue_Value() {}

// Column definitions sent prior to a set of Pages.
type Columns struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Columns []*Column `protobuf:"bytes,1,rep,name=columns,proto3" json:"columns,omitempty"`
}

func (x *Columns) Reset() {
	*x = Columns{}
	if protoimpl.UnsafeEnabled {
		mi := &file_squareup_cash_pranadb_service_v1_service_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Columns) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Columns) ProtoMessage() {}

func (x *Columns) ProtoReflect() protoreflect.Message {
	mi := &file_squareup_cash_pranadb_service_v1_service_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Columns.ProtoReflect.Descriptor instead.
func (*Columns) Descriptor() ([]byte, []int) {
	return file_squareup_cash_pranadb_service_v1_service_proto_rawDescGZIP(), []int{6}
}

func (x *Columns) GetColumns() []*Column {
	if x != nil {
		return x.Columns
	}
	return nil
}

type Row struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Values []*ColValue `protobuf:"bytes,1,rep,name=values,proto3" json:"values,omitempty"`
}

func (x *Row) Reset() {
	*x = Row{}
	if protoimpl.UnsafeEnabled {
		mi := &file_squareup_cash_pranadb_service_v1_service_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Row) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Row) ProtoMessage() {}

func (x *Row) ProtoReflect() protoreflect.Message {
	mi := &file_squareup_cash_pranadb_service_v1_service_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Row.ProtoReflect.Descriptor instead.
func (*Row) Descriptor() ([]byte, []int) {
	return file_squareup_cash_pranadb_service_v1_service_proto_rawDescGZIP(), []int{7}
}

func (x *Row) GetValues() []*ColValue {
	if x != nil {
		return x.Values
	}
	return nil
}

type ColValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Value:
	//	*ColValue_IsNull
	//	*ColValue_IntValue
	//	*ColValue_FloatValue
	//	*ColValue_StringValue
	Value isColValue_Value `protobuf_oneof:"value"`
}

func (x *ColValue) Reset() {
	*x = ColValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_squareup_cash_pranadb_service_v1_service_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ColValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ColValue) ProtoMessage() {}

func (x *ColValue) ProtoReflect() protoreflect.Message {
	mi := &file_squareup_cash_pranadb_service_v1_service_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ColValue.ProtoReflect.Descriptor instead.
func (*ColValue) Descriptor() ([]byte, []int) {
	return file_squareup_cash_pranadb_service_v1_service_proto_rawDescGZIP(), []int{8}
}

func (m *ColValue) GetValue() isColValue_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *ColValue) GetIsNull() bool {
	if x, ok := x.GetValue().(*ColValue_IsNull); ok {
		return x.IsNull
	}
	return false
}

func (x *ColValue) GetIntValue() int64 {
	if x, ok := x.GetValue().(*ColValue_IntValue); ok {
		return x.IntValue
	}
	return 0
}

func (x *ColValue) GetFloatValue() float64 {
	if x, ok := x.GetValue().(*ColValue_FloatValue); ok {
		return x.FloatValue
	}
	return 0
}

func (x *ColValue) GetStringValue() string {
	if x, ok := x.GetValue().(*ColValue_StringValue); ok {
		return x.StringValue
	}
	return ""
}

type isColValue_Value interface {
	isColValue_Value()
}

type ColValue_IsNull struct {
	IsNull bool `protobuf:"varint,1,opt,name=is_null,json=isNull,proto3,oneof"`
}

type ColValue_IntValue struct {
	IntValue int64 `protobuf:"varint,2,opt,name=int_value,json=intValue,proto3,oneof"`
}

type ColValue_FloatValue struct {
	FloatValue float64 `protobuf:"fixed64,3,opt,name=float_value,json=floatValue,proto3,oneof"`
}

type ColValue_StringValue struct {
	StringValue string `protobuf:"bytes,4,opt,name=string_value,json=stringValue,proto3,oneof"`
}

func (*ColValue_IsNull) isColValue_Value() {}

func (*ColValue_IntValue) isColValue_Value() {}

func (*ColValue_FloatValue) isColValue_Value() {}

func (*ColValue_StringValue) isColValue_Value() {}

// Each query may return an arbitrary number of pages.
type Page struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Count uint64 `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
	Rows  []*Row `protobuf:"bytes,2,rep,name=rows,proto3" json:"rows,omitempty"`
}

func (x *Page) Reset() {
	*x = Page{}
	if protoimpl.UnsafeEnabled {
		mi := &file_squareup_cash_pranadb_service_v1_service_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Page) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Page) ProtoMessage() {}

func (x *Page) ProtoReflect() protoreflect.Message {
	mi := &file_squareup_cash_pranadb_service_v1_service_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Page.ProtoReflect.Descriptor instead.
func (*Page) Descriptor() ([]byte, []int) {
	return file_squareup_cash_pranadb_service_v1_service_proto_rawDescGZIP(), []int{9}
}

func (x *Page) GetCount() uint64 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *Page) GetRows() []*Row {
	if x != nil {
		return x.Rows
	}
	return nil
}

type ExecuteStatementResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Result:
	//	*ExecuteStatementResponse_Columns
	//	*ExecuteStatementResponse_Page
	Result isExecuteStatementResponse_Result `protobuf_oneof:"result"`
}

func (x *ExecuteStatementResponse) Reset() {
	*x = ExecuteStatementResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_squareup_cash_pranadb_service_v1_service_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecuteStatementResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecuteStatementResponse) ProtoMessage() {}

func (x *ExecuteStatementResponse) ProtoReflect() protoreflect.Message {
	mi := &file_squareup_cash_pranadb_service_v1_service_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecuteStatementResponse.ProtoReflect.Descriptor instead.
func (*ExecuteStatementResponse) Descriptor() ([]byte, []int) {
	return file_squareup_cash_pranadb_service_v1_service_proto_rawDescGZIP(), []int{10}
}

func (m *ExecuteStatementResponse) GetResult() isExecuteStatementResponse_Result {
	if m != nil {
		return m.Result
	}
	return nil
}

func (x *ExecuteStatementResponse) GetColumns() *Columns {
	if x, ok := x.GetResult().(*ExecuteStatementResponse_Columns); ok {
		return x.Columns
	}
	return nil
}

func (x *ExecuteStatementResponse) GetPage() *Page {
	if x, ok := x.GetResult().(*ExecuteStatementResponse_Page); ok {
		return x.Page
	}
	return nil
}

type isExecuteStatementResponse_Result interface {
	isExecuteStatementResponse_Result()
}

type ExecuteStatementResponse_Columns struct {
	Columns *Columns `protobuf:"bytes,1,opt,name=columns,proto3,oneof"` // Present in first response.
}

type ExecuteStatementResponse_Page struct {
	Page *Page `protobuf:"bytes,2,opt,name=page,proto3,oneof"`
}

func (*ExecuteStatementResponse_Columns) isExecuteStatementResponse_Result() {}

func (*ExecuteStatementResponse_Page) isExecuteStatementResponse_Result() {}

type RegisterProtobufsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Descriptors *descriptorpb.FileDescriptorSet `protobuf:"bytes,1,opt,name=descriptors,proto3" json:"descriptors,omitempty"`
}

func (x *RegisterProtobufsRequest) Reset() {
	*x = RegisterProtobufsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_squareup_cash_pranadb_service_v1_service_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterProtobufsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterProtobufsRequest) ProtoMessage() {}

func (x *RegisterProtobufsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_squareup_cash_pranadb_service_v1_service_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterProtobufsRequest.ProtoReflect.Descriptor instead.
func (*RegisterProtobufsRequest) Descriptor() ([]byte, []int) {
	return file_squareup_cash_pranadb_service_v1_service_proto_rawDescGZIP(), []int{11}
}

func (x *RegisterProtobufsRequest) GetDescriptors() *descriptorpb.FileDescriptorSet {
	if x != nil {
		return x.Descriptors
	}
	return nil
}

var File_squareup_cash_pranadb_service_v1_service_proto protoreflect.FileDescriptor

var file_squareup_cash_pranadb_service_v1_service_proto_rawDesc = []byte{
	0x0a, 0x2e, 0x73, 0x71, 0x75, 0x61, 0x72, 0x65, 0x75, 0x70, 0x2f, 0x63, 0x61, 0x73, 0x68, 0x2f,
	0x70, 0x72, 0x61, 0x6e, 0x61, 0x64, 0x62, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f,
	0x76, 0x31, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x20, 0x73, 0x71, 0x75, 0x61, 0x72, 0x65, 0x75, 0x70, 0x2e, 0x63, 0x61, 0x73, 0x68, 0x2e,
	0x70, 0x72, 0x61, 0x6e, 0x61, 0x64, 0x62, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x76, 0x31, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x20, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0x61, 0x0a, 0x0d, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x73, 0x12, 0x2b, 0x0a, 0x11, 0x64, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x5f, 0x70, 0x72,
	0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x64,
	0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x50, 0x72, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x23, 0x0a, 0x0d, 0x64, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x5f, 0x73, 0x63, 0x61, 0x6c, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x64, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x53,
	0x63, 0x61, 0x6c, 0x65, 0x22, 0x23, 0x0a, 0x0f, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x66, 0x73, 0x70, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x66, 0x73, 0x70, 0x22, 0xce, 0x01, 0x0a, 0x06, 0x43, 0x6f,
	0x6c, 0x75, 0x6d, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x40, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2c, 0x2e, 0x73, 0x71, 0x75, 0x61, 0x72, 0x65, 0x75,
	0x70, 0x2e, 0x63, 0x61, 0x73, 0x68, 0x2e, 0x70, 0x72, 0x61, 0x6e, 0x61, 0x64, 0x62, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x5b, 0x0a, 0x0e, 0x64, 0x65,
	0x63, 0x69, 0x6d, 0x61, 0x6c, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x73, 0x71, 0x75, 0x61, 0x72, 0x65, 0x75, 0x70, 0x2e, 0x63, 0x61,
	0x73, 0x68, 0x2e, 0x70, 0x72, 0x61, 0x6e, 0x61, 0x64, 0x62, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x73, 0x48, 0x00, 0x52, 0x0d, 0x64, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x73, 0x88, 0x01, 0x01, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x64, 0x65, 0x63, 0x69,
	0x6d, 0x61, 0x6c, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x22, 0xc2, 0x01, 0x0a, 0x17, 0x45,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x12, 0x14,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x03, 0x73, 0x71, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x00, 0x52, 0x03, 0x73, 0x71, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x61, 0x74, 0x63,
	0x68, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x62, 0x61,
	0x74, 0x63, 0x68, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x39, 0x0a, 0x04, 0x61, 0x72, 0x67, 0x73, 0x18,
	0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x73, 0x71, 0x75, 0x61, 0x72, 0x65, 0x75, 0x70,
	0x2e, 0x63, 0x61, 0x73, 0x68, 0x2e, 0x70, 0x72, 0x61, 0x6e, 0x61, 0x64, 0x62, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x72, 0x67, 0x52, 0x04, 0x61, 0x72,
	0x67, 0x73, 0x42, 0x0b, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x22,
	0xf1, 0x02, 0x0a, 0x03, 0x41, 0x72, 0x67, 0x12, 0x40, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2c, 0x2e, 0x73, 0x71, 0x75, 0x61, 0x72, 0x65, 0x75, 0x70,
	0x2e, 0x63, 0x61, 0x73, 0x68, 0x2e, 0x70, 0x72, 0x61, 0x6e, 0x61, 0x64, 0x62, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x40, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x73, 0x71, 0x75, 0x61, 0x72,
	0x65, 0x75, 0x70, 0x2e, 0x63, 0x61, 0x73, 0x68, 0x2e, 0x70, 0x72, 0x61, 0x6e, 0x61, 0x64, 0x62,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x72, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x5b, 0x0a, 0x0e, 0x64,
	0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x73, 0x71, 0x75, 0x61, 0x72, 0x65, 0x75, 0x70, 0x2e, 0x63,
	0x61, 0x73, 0x68, 0x2e, 0x70, 0x72, 0x61, 0x6e, 0x61, 0x64, 0x62, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x73, 0x48, 0x00, 0x52, 0x0d, 0x64, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x73, 0x88, 0x01, 0x01, 0x12, 0x61, 0x0a, 0x10, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x31, 0x2e, 0x73, 0x71, 0x75, 0x61, 0x72, 0x65, 0x75, 0x70, 0x2e, 0x63, 0x61,
	0x73, 0x68, 0x2e, 0x70, 0x72, 0x61, 0x6e, 0x61, 0x64, 0x62, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x73, 0x48, 0x01, 0x52, 0x0f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x50, 0x61, 0x72, 0x61, 0x6e, 0x73, 0x88, 0x01, 0x01, 0x42, 0x11, 0x0a, 0x0f, 0x5f,
	0x64, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x42, 0x13,
	0x0a, 0x11, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x5f, 0x70, 0x61, 0x72,
	0x61, 0x6e, 0x73, 0x22, 0xcc, 0x01, 0x0a, 0x08, 0x41, 0x72, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x1d, 0x0a, 0x09, 0x69, 0x6e, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x21, 0x0a, 0x0b, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x01, 0x48, 0x00, 0x52, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x23, 0x0a, 0x0c, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0b, 0x73, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x25, 0x0a, 0x0d, 0x64, 0x65, 0x63, 0x69, 0x6d,
	0x61, 0x6c, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00,
	0x52, 0x0c, 0x64, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x29,
	0x0a, 0x0f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x5f, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0e, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x22, 0x4d, 0x0a, 0x07, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x12, 0x42, 0x0a,
	0x07, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28,
	0x2e, 0x73, 0x71, 0x75, 0x61, 0x72, 0x65, 0x75, 0x70, 0x2e, 0x63, 0x61, 0x73, 0x68, 0x2e, 0x70,
	0x72, 0x61, 0x6e, 0x61, 0x64, 0x62, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x52, 0x07, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e,
	0x73, 0x22, 0x49, 0x0a, 0x03, 0x52, 0x6f, 0x77, 0x12, 0x42, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x73, 0x71, 0x75, 0x61, 0x72,
	0x65, 0x75, 0x70, 0x2e, 0x63, 0x61, 0x73, 0x68, 0x2e, 0x70, 0x72, 0x61, 0x6e, 0x61, 0x64, 0x62,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6c, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x22, 0x95, 0x01, 0x0a,
	0x08, 0x43, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x07, 0x69, 0x73, 0x5f,
	0x6e, 0x75, 0x6c, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x06, 0x69, 0x73,
	0x4e, 0x75, 0x6c, 0x6c, 0x12, 0x1d, 0x0a, 0x09, 0x69, 0x6e, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x21, 0x0a, 0x0b, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x5f, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x48, 0x00, 0x52, 0x0a, 0x66, 0x6c, 0x6f, 0x61,
	0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x23, 0x0a, 0x0c, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0b,
	0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x22, 0x57, 0x0a, 0x04, 0x50, 0x61, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x39, 0x0a, 0x04, 0x72, 0x6f, 0x77, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x25, 0x2e, 0x73, 0x71, 0x75, 0x61, 0x72, 0x65, 0x75, 0x70, 0x2e, 0x63, 0x61, 0x73, 0x68,
	0x2e, 0x70, 0x72, 0x61, 0x6e, 0x61, 0x64, 0x62, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x52, 0x6f, 0x77, 0x52, 0x04, 0x72, 0x6f, 0x77, 0x73, 0x22, 0xa9, 0x01,
	0x0a, 0x18, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x45, 0x0a, 0x07, 0x63, 0x6f,
	0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x71,
	0x75, 0x61, 0x72, 0x65, 0x75, 0x70, 0x2e, 0x63, 0x61, 0x73, 0x68, 0x2e, 0x70, 0x72, 0x61, 0x6e,
	0x61, 0x64, 0x62, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x48, 0x00, 0x52, 0x07, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e,
	0x73, 0x12, 0x3c, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x26, 0x2e, 0x73, 0x71, 0x75, 0x61, 0x72, 0x65, 0x75, 0x70, 0x2e, 0x63, 0x61, 0x73, 0x68, 0x2e,
	0x70, 0x72, 0x61, 0x6e, 0x61, 0x64, 0x62, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x42,
	0x08, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x60, 0x0a, 0x18, 0x52, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x44, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x6f, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x6c,
	0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x53, 0x65, 0x74, 0x52, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x73, 0x2a, 0xd6, 0x01, 0x0a, 0x0a,
	0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x17, 0x43, 0x4f,
	0x4c, 0x55, 0x4d, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43,
	0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x18, 0x0a, 0x14, 0x43, 0x4f, 0x4c, 0x55, 0x4d,
	0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x49, 0x4e, 0x59, 0x5f, 0x49, 0x4e, 0x54, 0x10,
	0x01, 0x12, 0x13, 0x0a, 0x0f, 0x43, 0x4f, 0x4c, 0x55, 0x4d, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x49, 0x4e, 0x54, 0x10, 0x02, 0x12, 0x17, 0x0a, 0x13, 0x43, 0x4f, 0x4c, 0x55, 0x4d, 0x4e,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x42, 0x49, 0x47, 0x5f, 0x49, 0x4e, 0x54, 0x10, 0x03, 0x12,
	0x16, 0x0a, 0x12, 0x43, 0x4f, 0x4c, 0x55, 0x4d, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44,
	0x4f, 0x55, 0x42, 0x4c, 0x45, 0x10, 0x04, 0x12, 0x17, 0x0a, 0x13, 0x43, 0x4f, 0x4c, 0x55, 0x4d,
	0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x45, 0x43, 0x49, 0x4d, 0x41, 0x4c, 0x10, 0x05,
	0x12, 0x17, 0x0a, 0x13, 0x43, 0x4f, 0x4c, 0x55, 0x4d, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x56, 0x41, 0x52, 0x43, 0x48, 0x41, 0x52, 0x10, 0x06, 0x12, 0x19, 0x0a, 0x15, 0x43, 0x4f, 0x4c,
	0x55, 0x4d, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x53, 0x54, 0x41,
	0x4d, 0x50, 0x10, 0x07, 0x32, 0x87, 0x02, 0x0a, 0x0e, 0x50, 0x72, 0x61, 0x6e, 0x61, 0x44, 0x42,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x8b, 0x01, 0x0a, 0x10, 0x45, 0x78, 0x65, 0x63,
	0x75, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x39, 0x2e, 0x73,
	0x71, 0x75, 0x61, 0x72, 0x65, 0x75, 0x70, 0x2e, 0x63, 0x61, 0x73, 0x68, 0x2e, 0x70, 0x72, 0x61,
	0x6e, 0x61, 0x64, 0x62, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3a, 0x2e, 0x73, 0x71, 0x75, 0x61, 0x72, 0x65,
	0x75, 0x70, 0x2e, 0x63, 0x61, 0x73, 0x68, 0x2e, 0x70, 0x72, 0x61, 0x6e, 0x61, 0x64, 0x62, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x30, 0x01, 0x12, 0x67, 0x0a, 0x11, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65,
	0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x73, 0x12, 0x3a, 0x2e, 0x73, 0x71, 0x75,
	0x61, 0x72, 0x65, 0x75, 0x70, 0x2e, 0x63, 0x61, 0x73, 0x68, 0x2e, 0x70, 0x72, 0x61, 0x6e, 0x61,
	0x64, 0x62, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x42, 0x45,
	0x5a, 0x43, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x71, 0x75,
	0x61, 0x72, 0x65, 0x75, 0x70, 0x2f, 0x70, 0x72, 0x61, 0x6e, 0x61, 0x64, 0x62, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x73, 0x71, 0x75, 0x61, 0x72, 0x65, 0x75, 0x70, 0x2f, 0x63, 0x61,
	0x73, 0x68, 0x2f, 0x70, 0x72, 0x61, 0x6e, 0x61, 0x64, 0x62, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_squareup_cash_pranadb_service_v1_service_proto_rawDescOnce sync.Once
	file_squareup_cash_pranadb_service_v1_service_proto_rawDescData = file_squareup_cash_pranadb_service_v1_service_proto_rawDesc
)

func file_squareup_cash_pranadb_service_v1_service_proto_rawDescGZIP() []byte {
	file_squareup_cash_pranadb_service_v1_service_proto_rawDescOnce.Do(func() {
		file_squareup_cash_pranadb_service_v1_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_squareup_cash_pranadb_service_v1_service_proto_rawDescData)
	})
	return file_squareup_cash_pranadb_service_v1_service_proto_rawDescData
}

var file_squareup_cash_pranadb_service_v1_service_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_squareup_cash_pranadb_service_v1_service_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_squareup_cash_pranadb_service_v1_service_proto_goTypes = []interface{}{
	(ColumnType)(0),                        // 0: squareup.cash.pranadb.service.v1.ColumnType
	(*DecimalParams)(nil),                  // 1: squareup.cash.pranadb.service.v1.DecimalParams
	(*TimestampParams)(nil),                // 2: squareup.cash.pranadb.service.v1.TimestampParams
	(*Column)(nil),                         // 3: squareup.cash.pranadb.service.v1.Column
	(*ExecuteStatementRequest)(nil),        // 4: squareup.cash.pranadb.service.v1.ExecuteStatementRequest
	(*Arg)(nil),                            // 5: squareup.cash.pranadb.service.v1.Arg
	(*ArgValue)(nil),                       // 6: squareup.cash.pranadb.service.v1.ArgValue
	(*Columns)(nil),                        // 7: squareup.cash.pranadb.service.v1.Columns
	(*Row)(nil),                            // 8: squareup.cash.pranadb.service.v1.Row
	(*ColValue)(nil),                       // 9: squareup.cash.pranadb.service.v1.ColValue
	(*Page)(nil),                           // 10: squareup.cash.pranadb.service.v1.Page
	(*ExecuteStatementResponse)(nil),       // 11: squareup.cash.pranadb.service.v1.ExecuteStatementResponse
	(*RegisterProtobufsRequest)(nil),       // 12: squareup.cash.pranadb.service.v1.RegisterProtobufsRequest
	(*descriptorpb.FileDescriptorSet)(nil), // 13: google.protobuf.FileDescriptorSet
	(*emptypb.Empty)(nil),                  // 14: google.protobuf.Empty
}
var file_squareup_cash_pranadb_service_v1_service_proto_depIdxs = []int32{
	0,  // 0: squareup.cash.pranadb.service.v1.Column.type:type_name -> squareup.cash.pranadb.service.v1.ColumnType
	1,  // 1: squareup.cash.pranadb.service.v1.Column.decimal_params:type_name -> squareup.cash.pranadb.service.v1.DecimalParams
	5,  // 2: squareup.cash.pranadb.service.v1.ExecuteStatementRequest.args:type_name -> squareup.cash.pranadb.service.v1.Arg
	0,  // 3: squareup.cash.pranadb.service.v1.Arg.type:type_name -> squareup.cash.pranadb.service.v1.ColumnType
	6,  // 4: squareup.cash.pranadb.service.v1.Arg.value:type_name -> squareup.cash.pranadb.service.v1.ArgValue
	1,  // 5: squareup.cash.pranadb.service.v1.Arg.decimal_params:type_name -> squareup.cash.pranadb.service.v1.DecimalParams
	2,  // 6: squareup.cash.pranadb.service.v1.Arg.timestamp_parans:type_name -> squareup.cash.pranadb.service.v1.TimestampParams
	3,  // 7: squareup.cash.pranadb.service.v1.Columns.columns:type_name -> squareup.cash.pranadb.service.v1.Column
	9,  // 8: squareup.cash.pranadb.service.v1.Row.values:type_name -> squareup.cash.pranadb.service.v1.ColValue
	8,  // 9: squareup.cash.pranadb.service.v1.Page.rows:type_name -> squareup.cash.pranadb.service.v1.Row
	7,  // 10: squareup.cash.pranadb.service.v1.ExecuteStatementResponse.columns:type_name -> squareup.cash.pranadb.service.v1.Columns
	10, // 11: squareup.cash.pranadb.service.v1.ExecuteStatementResponse.page:type_name -> squareup.cash.pranadb.service.v1.Page
	13, // 12: squareup.cash.pranadb.service.v1.RegisterProtobufsRequest.descriptors:type_name -> google.protobuf.FileDescriptorSet
	4,  // 13: squareup.cash.pranadb.service.v1.PranaDBService.ExecuteStatement:input_type -> squareup.cash.pranadb.service.v1.ExecuteStatementRequest
	12, // 14: squareup.cash.pranadb.service.v1.PranaDBService.RegisterProtobufs:input_type -> squareup.cash.pranadb.service.v1.RegisterProtobufsRequest
	11, // 15: squareup.cash.pranadb.service.v1.PranaDBService.ExecuteStatement:output_type -> squareup.cash.pranadb.service.v1.ExecuteStatementResponse
	14, // 16: squareup.cash.pranadb.service.v1.PranaDBService.RegisterProtobufs:output_type -> google.protobuf.Empty
	15, // [15:17] is the sub-list for method output_type
	13, // [13:15] is the sub-list for method input_type
	13, // [13:13] is the sub-list for extension type_name
	13, // [13:13] is the sub-list for extension extendee
	0,  // [0:13] is the sub-list for field type_name
}

func init() { file_squareup_cash_pranadb_service_v1_service_proto_init() }
func file_squareup_cash_pranadb_service_v1_service_proto_init() {
	if File_squareup_cash_pranadb_service_v1_service_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_squareup_cash_pranadb_service_v1_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DecimalParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_squareup_cash_pranadb_service_v1_service_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TimestampParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_squareup_cash_pranadb_service_v1_service_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Column); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_squareup_cash_pranadb_service_v1_service_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExecuteStatementRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_squareup_cash_pranadb_service_v1_service_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Arg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_squareup_cash_pranadb_service_v1_service_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ArgValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_squareup_cash_pranadb_service_v1_service_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Columns); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_squareup_cash_pranadb_service_v1_service_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Row); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_squareup_cash_pranadb_service_v1_service_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ColValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_squareup_cash_pranadb_service_v1_service_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Page); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_squareup_cash_pranadb_service_v1_service_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExecuteStatementResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_squareup_cash_pranadb_service_v1_service_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterProtobufsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_squareup_cash_pranadb_service_v1_service_proto_msgTypes[2].OneofWrappers = []interface{}{}
	file_squareup_cash_pranadb_service_v1_service_proto_msgTypes[3].OneofWrappers = []interface{}{
		(*ExecuteStatementRequest_Name)(nil),
		(*ExecuteStatementRequest_Sql)(nil),
	}
	file_squareup_cash_pranadb_service_v1_service_proto_msgTypes[4].OneofWrappers = []interface{}{}
	file_squareup_cash_pranadb_service_v1_service_proto_msgTypes[5].OneofWrappers = []interface{}{
		(*ArgValue_IntValue)(nil),
		(*ArgValue_FloatValue)(nil),
		(*ArgValue_StringValue)(nil),
		(*ArgValue_DecimalValue)(nil),
		(*ArgValue_TimestampValue)(nil),
	}
	file_squareup_cash_pranadb_service_v1_service_proto_msgTypes[8].OneofWrappers = []interface{}{
		(*ColValue_IsNull)(nil),
		(*ColValue_IntValue)(nil),
		(*ColValue_FloatValue)(nil),
		(*ColValue_StringValue)(nil),
	}
	file_squareup_cash_pranadb_service_v1_service_proto_msgTypes[10].OneofWrappers = []interface{}{
		(*ExecuteStatementResponse_Columns)(nil),
		(*ExecuteStatementResponse_Page)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_squareup_cash_pranadb_service_v1_service_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_squareup_cash_pranadb_service_v1_service_proto_goTypes,
		DependencyIndexes: file_squareup_cash_pranadb_service_v1_service_proto_depIdxs,
		EnumInfos:         file_squareup_cash_pranadb_service_v1_service_proto_enumTypes,
		MessageInfos:      file_squareup_cash_pranadb_service_v1_service_proto_msgTypes,
	}.Build()
	File_squareup_cash_pranadb_service_v1_service_proto = out.File
	file_squareup_cash_pranadb_service_v1_service_proto_rawDesc = nil
	file_squareup_cash_pranadb_service_v1_service_proto_goTypes = nil
	file_squareup_cash_pranadb_service_v1_service_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// PranaDBServiceClient is the client API for PranaDBService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PranaDBServiceClient interface {
	ExecuteStatement(ctx context.Context, in *ExecuteStatementRequest, opts ...grpc.CallOption) (PranaDBService_ExecuteStatementClient, error)
	RegisterProtobufs(ctx context.Context, in *RegisterProtobufsRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type pranaDBServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPranaDBServiceClient(cc grpc.ClientConnInterface) PranaDBServiceClient {
	return &pranaDBServiceClient{cc}
}

func (c *pranaDBServiceClient) ExecuteStatement(ctx context.Context, in *ExecuteStatementRequest, opts ...grpc.CallOption) (PranaDBService_ExecuteStatementClient, error) {
	stream, err := c.cc.NewStream(ctx, &_PranaDBService_serviceDesc.Streams[0], "/squareup.cash.pranadb.service.v1.PranaDBService/ExecuteStatement", opts...)
	if err != nil {
		return nil, err
	}
	x := &pranaDBServiceExecuteStatementClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type PranaDBService_ExecuteStatementClient interface {
	Recv() (*ExecuteStatementResponse, error)
	grpc.ClientStream
}

type pranaDBServiceExecuteStatementClient struct {
	grpc.ClientStream
}

func (x *pranaDBServiceExecuteStatementClient) Recv() (*ExecuteStatementResponse, error) {
	m := new(ExecuteStatementResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *pranaDBServiceClient) RegisterProtobufs(ctx context.Context, in *RegisterProtobufsRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/squareup.cash.pranadb.service.v1.PranaDBService/RegisterProtobufs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PranaDBServiceServer is the server API for PranaDBService service.
type PranaDBServiceServer interface {
	ExecuteStatement(*ExecuteStatementRequest, PranaDBService_ExecuteStatementServer) error
	RegisterProtobufs(context.Context, *RegisterProtobufsRequest) (*emptypb.Empty, error)
}

// UnimplementedPranaDBServiceServer can be embedded to have forward compatible implementations.
type UnimplementedPranaDBServiceServer struct {
}

func (*UnimplementedPranaDBServiceServer) ExecuteStatement(*ExecuteStatementRequest, PranaDBService_ExecuteStatementServer) error {
	return status.Errorf(codes.Unimplemented, "method ExecuteStatement not implemented")
}
func (*UnimplementedPranaDBServiceServer) RegisterProtobufs(context.Context, *RegisterProtobufsRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterProtobufs not implemented")
}

func RegisterPranaDBServiceServer(s *grpc.Server, srv PranaDBServiceServer) {
	s.RegisterService(&_PranaDBService_serviceDesc, srv)
}

func _PranaDBService_ExecuteStatement_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ExecuteStatementRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PranaDBServiceServer).ExecuteStatement(m, &pranaDBServiceExecuteStatementServer{stream})
}

type PranaDBService_ExecuteStatementServer interface {
	Send(*ExecuteStatementResponse) error
	grpc.ServerStream
}

type pranaDBServiceExecuteStatementServer struct {
	grpc.ServerStream
}

func (x *pranaDBServiceExecuteStatementServer) Send(m *ExecuteStatementResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _PranaDBService_RegisterProtobufs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterProtobufsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PranaDBServiceServer).RegisterProtobufs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/squareup.cash.pranadb.service.v1.PranaDBService/RegisterProtobufs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PranaDBServiceServer).RegisterProtobufs(ctx, req.(*RegisterProtobufsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _PranaDBService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "squareup.cash.pranadb.service.v1.PranaDBService",
	HandlerType: (*PranaDBServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterProtobufs",
			Handler:    _PranaDBService_RegisterProtobufs_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ExecuteStatement",
			Handler:       _PranaDBService_ExecuteStatement_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "squareup/cash/pranadb/service/v1/service.proto",
}
