// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.17.3
// source: squareup/cash/pranadb/testproto/v1/testproto.proto

package testproto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Count int32

const (
	Count_COUNT_UNSPECIFIED Count = 0
	Count_COUNT_ONE         Count = 1
	Count_COUNT_TWO         Count = 2
)

// Enum value maps for Count.
var (
	Count_name = map[int32]string{
		0: "COUNT_UNSPECIFIED",
		1: "COUNT_ONE",
		2: "COUNT_TWO",
	}
	Count_value = map[string]int32{
		"COUNT_UNSPECIFIED": 0,
		"COUNT_ONE":         1,
		"COUNT_TWO":         2,
	}
)

func (x Count) Enum() *Count {
	p := new(Count)
	*p = x
	return p
}

func (x Count) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Count) Descriptor() protoreflect.EnumDescriptor {
	return file_squareup_cash_pranadb_testproto_v1_testproto_proto_enumTypes[0].Descriptor()
}

func (Count) Type() protoreflect.EnumType {
	return &file_squareup_cash_pranadb_testproto_v1_testproto_proto_enumTypes[0]
}

func (x Count) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Count.Descriptor instead.
func (Count) EnumDescriptor() ([]byte, []int) {
	return file_squareup_cash_pranadb_testproto_v1_testproto_proto_rawDescGZIP(), []int{0}
}

// enum
type ComprehensiveTestMessage_TestEnum int32

const (
	ComprehensiveTestMessage_TEST_ENUM_UNSPECIFIED ComprehensiveTestMessage_TestEnum = 0
	ComprehensiveTestMessage_TEST_ENUM_OPTION_1    ComprehensiveTestMessage_TestEnum = 1
	ComprehensiveTestMessage_TEST_ENUM_OPTION_2    ComprehensiveTestMessage_TestEnum = 2
	ComprehensiveTestMessage_TEST_ENUM_OPTION_3    ComprehensiveTestMessage_TestEnum = 3
)

// Enum value maps for ComprehensiveTestMessage_TestEnum.
var (
	ComprehensiveTestMessage_TestEnum_name = map[int32]string{
		0: "TEST_ENUM_UNSPECIFIED",
		1: "TEST_ENUM_OPTION_1",
		2: "TEST_ENUM_OPTION_2",
		3: "TEST_ENUM_OPTION_3",
	}
	ComprehensiveTestMessage_TestEnum_value = map[string]int32{
		"TEST_ENUM_UNSPECIFIED": 0,
		"TEST_ENUM_OPTION_1":    1,
		"TEST_ENUM_OPTION_2":    2,
		"TEST_ENUM_OPTION_3":    3,
	}
)

func (x ComprehensiveTestMessage_TestEnum) Enum() *ComprehensiveTestMessage_TestEnum {
	p := new(ComprehensiveTestMessage_TestEnum)
	*p = x
	return p
}

func (x ComprehensiveTestMessage_TestEnum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ComprehensiveTestMessage_TestEnum) Descriptor() protoreflect.EnumDescriptor {
	return file_squareup_cash_pranadb_testproto_v1_testproto_proto_enumTypes[1].Descriptor()
}

func (ComprehensiveTestMessage_TestEnum) Type() protoreflect.EnumType {
	return &file_squareup_cash_pranadb_testproto_v1_testproto_proto_enumTypes[1]
}

func (x ComprehensiveTestMessage_TestEnum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ComprehensiveTestMessage_TestEnum.Descriptor instead.
func (ComprehensiveTestMessage_TestEnum) EnumDescriptor() ([]byte, []int) {
	return file_squareup_cash_pranadb_testproto_v1_testproto_proto_rawDescGZIP(), []int{0, 0}
}

type ComprehensiveTestMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// scalars
	DoubleField   float64                           `protobuf:"fixed64,1,opt,name=double_field,json=doubleField,proto3" json:"double_field,omitempty"`
	FloatField    float32                           `protobuf:"fixed32,2,opt,name=float_field,json=floatField,proto3" json:"float_field,omitempty"`
	Int32Field    int32                             `protobuf:"varint,3,opt,name=int32_field,json=int32Field,proto3" json:"int32_field,omitempty"`
	Int64Field    int64                             `protobuf:"varint,4,opt,name=int64_field,json=int64Field,proto3" json:"int64_field,omitempty"`
	Uint32Field   uint32                            `protobuf:"varint,5,opt,name=uint32_field,json=uint32Field,proto3" json:"uint32_field,omitempty"`
	Uint64Field   uint64                            `protobuf:"varint,6,opt,name=uint64_field,json=uint64Field,proto3" json:"uint64_field,omitempty"`
	Sint32Field   int32                             `protobuf:"zigzag32,7,opt,name=sint32_field,json=sint32Field,proto3" json:"sint32_field,omitempty"`
	Sint64Field   int64                             `protobuf:"zigzag64,8,opt,name=sint64_field,json=sint64Field,proto3" json:"sint64_field,omitempty"`
	Fixed32Field  uint32                            `protobuf:"fixed32,9,opt,name=fixed32_field,json=fixed32Field,proto3" json:"fixed32_field,omitempty"`
	Fixed64Field  uint64                            `protobuf:"fixed64,10,opt,name=fixed64_field,json=fixed64Field,proto3" json:"fixed64_field,omitempty"`
	Sfixed32Field int32                             `protobuf:"fixed32,11,opt,name=sfixed32_field,json=sfixed32Field,proto3" json:"sfixed32_field,omitempty"`
	Sfixed64Field int64                             `protobuf:"fixed64,12,opt,name=sfixed64_field,json=sfixed64Field,proto3" json:"sfixed64_field,omitempty"`
	BoolField     bool                              `protobuf:"varint,13,opt,name=bool_field,json=boolField,proto3" json:"bool_field,omitempty"`
	StringField   string                            `protobuf:"bytes,14,opt,name=string_field,json=stringField,proto3" json:"string_field,omitempty"`
	BytesField    []byte                            `protobuf:"bytes,15,opt,name=bytes_field,json=bytesField,proto3" json:"bytes_field,omitempty"`
	EnumField     ComprehensiveTestMessage_TestEnum `protobuf:"varint,20,opt,name=enum_field,json=enumField,proto3,enum=squareup.cash.pranadb.testproto.v1.ComprehensiveTestMessage_TestEnum" json:"enum_field,omitempty"`
	// message
	RecursiveField *ComprehensiveTestMessage `protobuf:"bytes,30,opt,name=recursive_field,json=recursiveField,proto3" json:"recursive_field,omitempty"`
	// oneof
	//
	// Types that are assignable to OneofField:
	//	*ComprehensiveTestMessage_OneofInt64Field
	//	*ComprehensiveTestMessage_OneofBoolField
	//	*ComprehensiveTestMessage_OneofStringField
	//	*ComprehensiveTestMessage_OneofRecursiveField
	OneofField isComprehensiveTestMessage_OneofField `protobuf_oneof:"oneof_field"`
	// map
	MapStringIntField       map[string]int64                             `protobuf:"bytes,50,rep,name=map_string_int_field,json=mapStringIntField,proto3" json:"map_string_int_field,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	MapIntStringField       map[int64]string                             `protobuf:"bytes,51,rep,name=map_int_string_field,json=mapIntStringField,proto3" json:"map_int_string_field,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	MapStringRecursiveField map[string]*ComprehensiveTestMessage         `protobuf:"bytes,52,rep,name=map_string_recursive_field,json=mapStringRecursiveField,proto3" json:"map_string_recursive_field,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	MapStringEnumField      map[string]ComprehensiveTestMessage_TestEnum `protobuf:"bytes,53,rep,name=map_string_enum_field,json=mapStringEnumField,proto3" json:"map_string_enum_field,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3,enum=squareup.cash.pranadb.testproto.v1.ComprehensiveTestMessage_TestEnum"`
	// repeated
	RepeatedInt64Field     []int64                     `protobuf:"varint,60,rep,packed,name=repeated_int64_field,json=repeatedInt64Field,proto3" json:"repeated_int64_field,omitempty"`
	RepeatedRecursiveField []*ComprehensiveTestMessage `protobuf:"bytes,61,rep,name=repeated_recursive_field,json=repeatedRecursiveField,proto3" json:"repeated_recursive_field,omitempty"`
}

func (x *ComprehensiveTestMessage) Reset() {
	*x = ComprehensiveTestMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_squareup_cash_pranadb_testproto_v1_testproto_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ComprehensiveTestMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComprehensiveTestMessage) ProtoMessage() {}

func (x *ComprehensiveTestMessage) ProtoReflect() protoreflect.Message {
	mi := &file_squareup_cash_pranadb_testproto_v1_testproto_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComprehensiveTestMessage.ProtoReflect.Descriptor instead.
func (*ComprehensiveTestMessage) Descriptor() ([]byte, []int) {
	return file_squareup_cash_pranadb_testproto_v1_testproto_proto_rawDescGZIP(), []int{0}
}

func (x *ComprehensiveTestMessage) GetDoubleField() float64 {
	if x != nil {
		return x.DoubleField
	}
	return 0
}

func (x *ComprehensiveTestMessage) GetFloatField() float32 {
	if x != nil {
		return x.FloatField
	}
	return 0
}

func (x *ComprehensiveTestMessage) GetInt32Field() int32 {
	if x != nil {
		return x.Int32Field
	}
	return 0
}

func (x *ComprehensiveTestMessage) GetInt64Field() int64 {
	if x != nil {
		return x.Int64Field
	}
	return 0
}

func (x *ComprehensiveTestMessage) GetUint32Field() uint32 {
	if x != nil {
		return x.Uint32Field
	}
	return 0
}

func (x *ComprehensiveTestMessage) GetUint64Field() uint64 {
	if x != nil {
		return x.Uint64Field
	}
	return 0
}

func (x *ComprehensiveTestMessage) GetSint32Field() int32 {
	if x != nil {
		return x.Sint32Field
	}
	return 0
}

func (x *ComprehensiveTestMessage) GetSint64Field() int64 {
	if x != nil {
		return x.Sint64Field
	}
	return 0
}

func (x *ComprehensiveTestMessage) GetFixed32Field() uint32 {
	if x != nil {
		return x.Fixed32Field
	}
	return 0
}

func (x *ComprehensiveTestMessage) GetFixed64Field() uint64 {
	if x != nil {
		return x.Fixed64Field
	}
	return 0
}

func (x *ComprehensiveTestMessage) GetSfixed32Field() int32 {
	if x != nil {
		return x.Sfixed32Field
	}
	return 0
}

func (x *ComprehensiveTestMessage) GetSfixed64Field() int64 {
	if x != nil {
		return x.Sfixed64Field
	}
	return 0
}

func (x *ComprehensiveTestMessage) GetBoolField() bool {
	if x != nil {
		return x.BoolField
	}
	return false
}

func (x *ComprehensiveTestMessage) GetStringField() string {
	if x != nil {
		return x.StringField
	}
	return ""
}

func (x *ComprehensiveTestMessage) GetBytesField() []byte {
	if x != nil {
		return x.BytesField
	}
	return nil
}

func (x *ComprehensiveTestMessage) GetEnumField() ComprehensiveTestMessage_TestEnum {
	if x != nil {
		return x.EnumField
	}
	return ComprehensiveTestMessage_TEST_ENUM_UNSPECIFIED
}

func (x *ComprehensiveTestMessage) GetRecursiveField() *ComprehensiveTestMessage {
	if x != nil {
		return x.RecursiveField
	}
	return nil
}

func (m *ComprehensiveTestMessage) GetOneofField() isComprehensiveTestMessage_OneofField {
	if m != nil {
		return m.OneofField
	}
	return nil
}

func (x *ComprehensiveTestMessage) GetOneofInt64Field() int64 {
	if x, ok := x.GetOneofField().(*ComprehensiveTestMessage_OneofInt64Field); ok {
		return x.OneofInt64Field
	}
	return 0
}

func (x *ComprehensiveTestMessage) GetOneofBoolField() bool {
	if x, ok := x.GetOneofField().(*ComprehensiveTestMessage_OneofBoolField); ok {
		return x.OneofBoolField
	}
	return false
}

func (x *ComprehensiveTestMessage) GetOneofStringField() string {
	if x, ok := x.GetOneofField().(*ComprehensiveTestMessage_OneofStringField); ok {
		return x.OneofStringField
	}
	return ""
}

func (x *ComprehensiveTestMessage) GetOneofRecursiveField() *ComprehensiveTestMessage {
	if x, ok := x.GetOneofField().(*ComprehensiveTestMessage_OneofRecursiveField); ok {
		return x.OneofRecursiveField
	}
	return nil
}

func (x *ComprehensiveTestMessage) GetMapStringIntField() map[string]int64 {
	if x != nil {
		return x.MapStringIntField
	}
	return nil
}

func (x *ComprehensiveTestMessage) GetMapIntStringField() map[int64]string {
	if x != nil {
		return x.MapIntStringField
	}
	return nil
}

func (x *ComprehensiveTestMessage) GetMapStringRecursiveField() map[string]*ComprehensiveTestMessage {
	if x != nil {
		return x.MapStringRecursiveField
	}
	return nil
}

func (x *ComprehensiveTestMessage) GetMapStringEnumField() map[string]ComprehensiveTestMessage_TestEnum {
	if x != nil {
		return x.MapStringEnumField
	}
	return nil
}

func (x *ComprehensiveTestMessage) GetRepeatedInt64Field() []int64 {
	if x != nil {
		return x.RepeatedInt64Field
	}
	return nil
}

func (x *ComprehensiveTestMessage) GetRepeatedRecursiveField() []*ComprehensiveTestMessage {
	if x != nil {
		return x.RepeatedRecursiveField
	}
	return nil
}

type isComprehensiveTestMessage_OneofField interface {
	isComprehensiveTestMessage_OneofField()
}

type ComprehensiveTestMessage_OneofInt64Field struct {
	OneofInt64Field int64 `protobuf:"varint,41,opt,name=oneof_int64_field,json=oneofInt64Field,proto3,oneof"`
}

type ComprehensiveTestMessage_OneofBoolField struct {
	OneofBoolField bool `protobuf:"varint,42,opt,name=oneof_bool_field,json=oneofBoolField,proto3,oneof"`
}

type ComprehensiveTestMessage_OneofStringField struct {
	OneofStringField string `protobuf:"bytes,43,opt,name=oneof_string_field,json=oneofStringField,proto3,oneof"`
}

type ComprehensiveTestMessage_OneofRecursiveField struct {
	OneofRecursiveField *ComprehensiveTestMessage `protobuf:"bytes,44,opt,name=oneof_recursive_field,json=oneofRecursiveField,proto3,oneof"`
}

func (*ComprehensiveTestMessage_OneofInt64Field) isComprehensiveTestMessage_OneofField() {}

func (*ComprehensiveTestMessage_OneofBoolField) isComprehensiveTestMessage_OneofField() {}

func (*ComprehensiveTestMessage_OneofStringField) isComprehensiveTestMessage_OneofField() {}

func (*ComprehensiveTestMessage_OneofRecursiveField) isComprehensiveTestMessage_OneofField() {}

type TestTypes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DoubleField         float64           `protobuf:"fixed64,1,opt,name=double_field,json=doubleField,proto3" json:"double_field,omitempty"`
	FloatField          float32           `protobuf:"fixed32,2,opt,name=float_field,json=floatField,proto3" json:"float_field,omitempty"`
	Int32Field          int32             `protobuf:"varint,3,opt,name=int32_field,json=int32Field,proto3" json:"int32_field,omitempty"`
	Int64Field          int64             `protobuf:"varint,4,opt,name=int64_field,json=int64Field,proto3" json:"int64_field,omitempty"`
	Uint32Field         uint32            `protobuf:"varint,5,opt,name=uint32_field,json=uint32Field,proto3" json:"uint32_field,omitempty"`
	Uint64Field         uint64            `protobuf:"varint,6,opt,name=uint64_field,json=uint64Field,proto3" json:"uint64_field,omitempty"`
	BoolField           bool              `protobuf:"varint,7,opt,name=bool_field,json=boolField,proto3" json:"bool_field,omitempty"`
	StringField         string            `protobuf:"bytes,8,opt,name=string_field,json=stringField,proto3" json:"string_field,omitempty"`
	EnumField           Count             `protobuf:"varint,9,opt,name=enum_field,json=enumField,proto3,enum=squareup.cash.pranadb.testproto.v1.Count" json:"enum_field,omitempty"`
	BytesField          []byte            `protobuf:"bytes,10,opt,name=bytes_field,json=bytesField,proto3" json:"bytes_field,omitempty"`
	NestedField         *TestTypes_Nested `protobuf:"bytes,11,opt,name=nested_field,json=nestedField,proto3" json:"nested_field,omitempty"`
	RepeatedStringField []string          `protobuf:"bytes,12,rep,name=repeated_string_field,json=repeatedStringField,proto3" json:"repeated_string_field,omitempty"`
	RecursiveField      *Recursive        `protobuf:"bytes,13,opt,name=recursive_field,json=recursiveField,proto3" json:"recursive_field,omitempty"`
	// Types that are assignable to OneofField:
	//	*TestTypes_OneString
	//	*TestTypes_OneInt64
	OneofField      isTestTypes_OneofField  `protobuf_oneof:"oneof_field"`
	StringMapField  map[string]string       `protobuf:"bytes,16,rep,name=string_map_field,json=stringMapField,proto3" json:"string_map_field,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	IntMapField     map[int32]string        `protobuf:"bytes,17,rep,name=int_map_field,json=intMapField,proto3" json:"int_map_field,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	MapMessageField map[string]*SimpleValue `protobuf:"bytes,18,rep,name=map_message_field,json=mapMessageField,proto3" json:"map_message_field,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	ImportField     *Imported               `protobuf:"bytes,19,opt,name=import_field,json=importField,proto3" json:"import_field,omitempty"`
}

func (x *TestTypes) Reset() {
	*x = TestTypes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_squareup_cash_pranadb_testproto_v1_testproto_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestTypes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestTypes) ProtoMessage() {}

func (x *TestTypes) ProtoReflect() protoreflect.Message {
	mi := &file_squareup_cash_pranadb_testproto_v1_testproto_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestTypes.ProtoReflect.Descriptor instead.
func (*TestTypes) Descriptor() ([]byte, []int) {
	return file_squareup_cash_pranadb_testproto_v1_testproto_proto_rawDescGZIP(), []int{1}
}

func (x *TestTypes) GetDoubleField() float64 {
	if x != nil {
		return x.DoubleField
	}
	return 0
}

func (x *TestTypes) GetFloatField() float32 {
	if x != nil {
		return x.FloatField
	}
	return 0
}

func (x *TestTypes) GetInt32Field() int32 {
	if x != nil {
		return x.Int32Field
	}
	return 0
}

func (x *TestTypes) GetInt64Field() int64 {
	if x != nil {
		return x.Int64Field
	}
	return 0
}

func (x *TestTypes) GetUint32Field() uint32 {
	if x != nil {
		return x.Uint32Field
	}
	return 0
}

func (x *TestTypes) GetUint64Field() uint64 {
	if x != nil {
		return x.Uint64Field
	}
	return 0
}

func (x *TestTypes) GetBoolField() bool {
	if x != nil {
		return x.BoolField
	}
	return false
}

func (x *TestTypes) GetStringField() string {
	if x != nil {
		return x.StringField
	}
	return ""
}

func (x *TestTypes) GetEnumField() Count {
	if x != nil {
		return x.EnumField
	}
	return Count_COUNT_UNSPECIFIED
}

func (x *TestTypes) GetBytesField() []byte {
	if x != nil {
		return x.BytesField
	}
	return nil
}

func (x *TestTypes) GetNestedField() *TestTypes_Nested {
	if x != nil {
		return x.NestedField
	}
	return nil
}

func (x *TestTypes) GetRepeatedStringField() []string {
	if x != nil {
		return x.RepeatedStringField
	}
	return nil
}

func (x *TestTypes) GetRecursiveField() *Recursive {
	if x != nil {
		return x.RecursiveField
	}
	return nil
}

func (m *TestTypes) GetOneofField() isTestTypes_OneofField {
	if m != nil {
		return m.OneofField
	}
	return nil
}

func (x *TestTypes) GetOneString() string {
	if x, ok := x.GetOneofField().(*TestTypes_OneString); ok {
		return x.OneString
	}
	return ""
}

func (x *TestTypes) GetOneInt64() int64 {
	if x, ok := x.GetOneofField().(*TestTypes_OneInt64); ok {
		return x.OneInt64
	}
	return 0
}

func (x *TestTypes) GetStringMapField() map[string]string {
	if x != nil {
		return x.StringMapField
	}
	return nil
}

func (x *TestTypes) GetIntMapField() map[int32]string {
	if x != nil {
		return x.IntMapField
	}
	return nil
}

func (x *TestTypes) GetMapMessageField() map[string]*SimpleValue {
	if x != nil {
		return x.MapMessageField
	}
	return nil
}

func (x *TestTypes) GetImportField() *Imported {
	if x != nil {
		return x.ImportField
	}
	return nil
}

type isTestTypes_OneofField interface {
	isTestTypes_OneofField()
}

type TestTypes_OneString struct {
	OneString string `protobuf:"bytes,14,opt,name=one_string,json=oneString,proto3,oneof"`
}

type TestTypes_OneInt64 struct {
	OneInt64 int64 `protobuf:"varint,15,opt,name=one_int64,json=oneInt64,proto3,oneof"`
}

func (*TestTypes_OneString) isTestTypes_OneofField() {}

func (*TestTypes_OneInt64) isTestTypes_OneofField() {}

type Recursive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StringField    string     `protobuf:"bytes,1,opt,name=string_field,json=stringField,proto3" json:"string_field,omitempty"`
	RecursiveField *Recursive `protobuf:"bytes,2,opt,name=recursive_field,json=recursiveField,proto3" json:"recursive_field,omitempty"`
}

func (x *Recursive) Reset() {
	*x = Recursive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_squareup_cash_pranadb_testproto_v1_testproto_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Recursive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Recursive) ProtoMessage() {}

func (x *Recursive) ProtoReflect() protoreflect.Message {
	mi := &file_squareup_cash_pranadb_testproto_v1_testproto_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Recursive.ProtoReflect.Descriptor instead.
func (*Recursive) Descriptor() ([]byte, []int) {
	return file_squareup_cash_pranadb_testproto_v1_testproto_proto_rawDescGZIP(), []int{2}
}

func (x *Recursive) GetStringField() string {
	if x != nil {
		return x.StringField
	}
	return ""
}

func (x *Recursive) GetRecursiveField() *Recursive {
	if x != nil {
		return x.RecursiveField
	}
	return nil
}

type SimpleValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *SimpleValue) Reset() {
	*x = SimpleValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_squareup_cash_pranadb_testproto_v1_testproto_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SimpleValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SimpleValue) ProtoMessage() {}

func (x *SimpleValue) ProtoReflect() protoreflect.Message {
	mi := &file_squareup_cash_pranadb_testproto_v1_testproto_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SimpleValue.ProtoReflect.Descriptor instead.
func (*SimpleValue) Descriptor() ([]byte, []int) {
	return file_squareup_cash_pranadb_testproto_v1_testproto_proto_rawDescGZIP(), []int{3}
}

func (x *SimpleValue) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type TestTypes_Nested struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NestedString         string            `protobuf:"bytes,1,opt,name=nested_string,json=nestedString,proto3" json:"nested_string,omitempty"`
	NestedRepeatedString []string          `protobuf:"bytes,2,rep,name=nested_repeated_string,json=nestedRepeatedString,proto3" json:"nested_repeated_string,omitempty"`
	NestedMap            map[string]string `protobuf:"bytes,3,rep,name=nested_map,json=nestedMap,proto3" json:"nested_map,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *TestTypes_Nested) Reset() {
	*x = TestTypes_Nested{}
	if protoimpl.UnsafeEnabled {
		mi := &file_squareup_cash_pranadb_testproto_v1_testproto_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestTypes_Nested) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestTypes_Nested) ProtoMessage() {}

func (x *TestTypes_Nested) ProtoReflect() protoreflect.Message {
	mi := &file_squareup_cash_pranadb_testproto_v1_testproto_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestTypes_Nested.ProtoReflect.Descriptor instead.
func (*TestTypes_Nested) Descriptor() ([]byte, []int) {
	return file_squareup_cash_pranadb_testproto_v1_testproto_proto_rawDescGZIP(), []int{1, 0}
}

func (x *TestTypes_Nested) GetNestedString() string {
	if x != nil {
		return x.NestedString
	}
	return ""
}

func (x *TestTypes_Nested) GetNestedRepeatedString() []string {
	if x != nil {
		return x.NestedRepeatedString
	}
	return nil
}

func (x *TestTypes_Nested) GetNestedMap() map[string]string {
	if x != nil {
		return x.NestedMap
	}
	return nil
}

var File_squareup_cash_pranadb_testproto_v1_testproto_proto protoreflect.FileDescriptor

var file_squareup_cash_pranadb_testproto_v1_testproto_proto_rawDesc = []byte{
	0x0a, 0x32, 0x73, 0x71, 0x75, 0x61, 0x72, 0x65, 0x75, 0x70, 0x2f, 0x63, 0x61, 0x73, 0x68, 0x2f,
	0x70, 0x72, 0x61, 0x6e, 0x61, 0x64, 0x62, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x22, 0x73, 0x71, 0x75, 0x61, 0x72, 0x65, 0x75, 0x70, 0x2e, 0x63,
	0x61, 0x73, 0x68, 0x2e, 0x70, 0x72, 0x61, 0x6e, 0x61, 0x64, 0x62, 0x2e, 0x74, 0x65, 0x73, 0x74,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x1a, 0x30, 0x73, 0x71, 0x75, 0x61, 0x72, 0x65,
	0x75, 0x70, 0x2f, 0x63, 0x61, 0x73, 0x68, 0x2f, 0x70, 0x72, 0x61, 0x6e, 0x61, 0x64, 0x62, 0x2f,
	0x74, 0x65, 0x73, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x76, 0x31, 0x2f, 0x69, 0x6d, 0x70,
	0x6f, 0x72, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xf1, 0x11, 0x0a, 0x18, 0x43,
	0x6f, 0x6d, 0x70, 0x72, 0x65, 0x68, 0x65, 0x6e, 0x73, 0x69, 0x76, 0x65, 0x54, 0x65, 0x73, 0x74,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x6f, 0x75, 0x62, 0x6c,
	0x65, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x64,
	0x6f, 0x75, 0x62, 0x6c, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x6c,
	0x6f, 0x61, 0x74, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x69,
	0x6e, 0x74, 0x33, 0x32, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0a, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x1f, 0x0a, 0x0b,
	0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0a, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x21, 0x0a,
	0x0c, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0b, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x12, 0x21, 0x0a, 0x0c, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x11, 0x52, 0x0b, 0x73, 0x69, 0x6e, 0x74, 0x33,
	0x32, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x69, 0x6e, 0x74, 0x36, 0x34,
	0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x12, 0x52, 0x0b, 0x73, 0x69,
	0x6e, 0x74, 0x36, 0x34, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x66, 0x69, 0x78,
	0x65, 0x64, 0x33, 0x32, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x07,
	0x52, 0x0c, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x23,
	0x0a, 0x0d, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x06, 0x52, 0x0c, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x5f,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0f, 0x52, 0x0d, 0x73, 0x66, 0x69,
	0x78, 0x65, 0x64, 0x33, 0x32, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x66,
	0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x10, 0x52, 0x0d, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x6f, 0x6f, 0x6c, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x62, 0x6f, 0x6f, 0x6c, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x12, 0x21, 0x0a, 0x0c, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x62, 0x79, 0x74, 0x65, 0x73, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x12, 0x64, 0x0a, 0x0a, 0x65, 0x6e, 0x75, 0x6d, 0x5f, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x45, 0x2e, 0x73, 0x71, 0x75, 0x61, 0x72,
	0x65, 0x75, 0x70, 0x2e, 0x63, 0x61, 0x73, 0x68, 0x2e, 0x70, 0x72, 0x61, 0x6e, 0x61, 0x64, 0x62,
	0x2e, 0x74, 0x65, 0x73, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f,
	0x6d, 0x70, 0x72, 0x65, 0x68, 0x65, 0x6e, 0x73, 0x69, 0x76, 0x65, 0x54, 0x65, 0x73, 0x74, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x45, 0x6e, 0x75, 0x6d, 0x52,
	0x09, 0x65, 0x6e, 0x75, 0x6d, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x65, 0x0a, 0x0f, 0x72, 0x65,
	0x63, 0x75, 0x72, 0x73, 0x69, 0x76, 0x65, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x1e, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x73, 0x71, 0x75, 0x61, 0x72, 0x65, 0x75, 0x70, 0x2e, 0x63,
	0x61, 0x73, 0x68, 0x2e, 0x70, 0x72, 0x61, 0x6e, 0x61, 0x64, 0x62, 0x2e, 0x74, 0x65, 0x73, 0x74,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x68,
	0x65, 0x6e, 0x73, 0x69, 0x76, 0x65, 0x54, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x52, 0x0e, 0x72, 0x65, 0x63, 0x75, 0x72, 0x73, 0x69, 0x76, 0x65, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x12, 0x2c, 0x0a, 0x11, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x5f, 0x69, 0x6e, 0x74, 0x36, 0x34,
	0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x29, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x0f,
	0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12,
	0x2a, 0x0a, 0x10, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x5f, 0x62, 0x6f, 0x6f, 0x6c, 0x5f, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x0e, 0x6f, 0x6e, 0x65,
	0x6f, 0x66, 0x42, 0x6f, 0x6f, 0x6c, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x2e, 0x0a, 0x12, 0x6f,
	0x6e, 0x65, 0x6f, 0x66, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x10, 0x6f, 0x6e, 0x65, 0x6f, 0x66,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x72, 0x0a, 0x15, 0x6f,
	0x6e, 0x65, 0x6f, 0x66, 0x5f, 0x72, 0x65, 0x63, 0x75, 0x72, 0x73, 0x69, 0x76, 0x65, 0x5f, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x73, 0x71, 0x75,
	0x61, 0x72, 0x65, 0x75, 0x70, 0x2e, 0x63, 0x61, 0x73, 0x68, 0x2e, 0x70, 0x72, 0x61, 0x6e, 0x61,
	0x64, 0x62, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x68, 0x65, 0x6e, 0x73, 0x69, 0x76, 0x65, 0x54, 0x65, 0x73,
	0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x13, 0x6f, 0x6e, 0x65, 0x6f,
	0x66, 0x52, 0x65, 0x63, 0x75, 0x72, 0x73, 0x69, 0x76, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12,
	0x84, 0x01, 0x0a, 0x14, 0x6d, 0x61, 0x70, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x69,
	0x6e, 0x74, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x32, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x53,
	0x2e, 0x73, 0x71, 0x75, 0x61, 0x72, 0x65, 0x75, 0x70, 0x2e, 0x63, 0x61, 0x73, 0x68, 0x2e, 0x70,
	0x72, 0x61, 0x6e, 0x61, 0x64, 0x62, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x68, 0x65, 0x6e, 0x73, 0x69, 0x76,
	0x65, 0x54, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x4d, 0x61, 0x70,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x11, 0x6d, 0x61, 0x70, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x49, 0x6e,
	0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x84, 0x01, 0x0a, 0x14, 0x6d, 0x61, 0x70, 0x5f, 0x69,
	0x6e, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18,
	0x33, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x53, 0x2e, 0x73, 0x71, 0x75, 0x61, 0x72, 0x65, 0x75, 0x70,
	0x2e, 0x63, 0x61, 0x73, 0x68, 0x2e, 0x70, 0x72, 0x61, 0x6e, 0x61, 0x64, 0x62, 0x2e, 0x74, 0x65,
	0x73, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x72,
	0x65, 0x68, 0x65, 0x6e, 0x73, 0x69, 0x76, 0x65, 0x54, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x2e, 0x4d, 0x61, 0x70, 0x49, 0x6e, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x11, 0x6d, 0x61, 0x70, 0x49,
	0x6e, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x96, 0x01,
	0x0a, 0x1a, 0x6d, 0x61, 0x70, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x65, 0x63,
	0x75, 0x72, 0x73, 0x69, 0x76, 0x65, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x34, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x59, 0x2e, 0x73, 0x71, 0x75, 0x61, 0x72, 0x65, 0x75, 0x70, 0x2e, 0x63, 0x61,
	0x73, 0x68, 0x2e, 0x70, 0x72, 0x61, 0x6e, 0x61, 0x64, 0x62, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x68, 0x65,
	0x6e, 0x73, 0x69, 0x76, 0x65, 0x54, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x2e, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x63, 0x75, 0x72, 0x73,
	0x69, 0x76, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x17, 0x6d,
	0x61, 0x70, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x63, 0x75, 0x72, 0x73, 0x69, 0x76,
	0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x87, 0x01, 0x0a, 0x15, 0x6d, 0x61, 0x70, 0x5f, 0x73,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x65, 0x6e, 0x75, 0x6d, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x18, 0x35, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x54, 0x2e, 0x73, 0x71, 0x75, 0x61, 0x72, 0x65, 0x75,
	0x70, 0x2e, 0x63, 0x61, 0x73, 0x68, 0x2e, 0x70, 0x72, 0x61, 0x6e, 0x61, 0x64, 0x62, 0x2e, 0x74,
	0x65, 0x73, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6d, 0x70,
	0x72, 0x65, 0x68, 0x65, 0x6e, 0x73, 0x69, 0x76, 0x65, 0x54, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x2e, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x45, 0x6e,
	0x75, 0x6d, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x12, 0x6d, 0x61,
	0x70, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x45, 0x6e, 0x75, 0x6d, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x12, 0x30, 0x0a, 0x14, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x74,
	0x36, 0x34, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x3c, 0x20, 0x03, 0x28, 0x03, 0x52, 0x12,
	0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x12, 0x76, 0x0a, 0x18, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x72,
	0x65, 0x63, 0x75, 0x72, 0x73, 0x69, 0x76, 0x65, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x3d,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x73, 0x71, 0x75, 0x61, 0x72, 0x65, 0x75, 0x70, 0x2e,
	0x63, 0x61, 0x73, 0x68, 0x2e, 0x70, 0x72, 0x61, 0x6e, 0x61, 0x64, 0x62, 0x2e, 0x74, 0x65, 0x73,
	0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x72, 0x65,
	0x68, 0x65, 0x6e, 0x73, 0x69, 0x76, 0x65, 0x54, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x52, 0x16, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x52, 0x65, 0x63, 0x75,
	0x72, 0x73, 0x69, 0x76, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x1a, 0x44, 0x0a, 0x16, 0x4d, 0x61,
	0x70, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x1a, 0x44, 0x0a, 0x16, 0x4d, 0x61, 0x70, 0x49, 0x6e, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x88, 0x01, 0x0a, 0x1c, 0x4d, 0x61, 0x70, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x63, 0x75, 0x72, 0x73, 0x69, 0x76, 0x65, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x52, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x73, 0x71, 0x75, 0x61, 0x72,
	0x65, 0x75, 0x70, 0x2e, 0x63, 0x61, 0x73, 0x68, 0x2e, 0x70, 0x72, 0x61, 0x6e, 0x61, 0x64, 0x62,
	0x2e, 0x74, 0x65, 0x73, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f,
	0x6d, 0x70, 0x72, 0x65, 0x68, 0x65, 0x6e, 0x73, 0x69, 0x76, 0x65, 0x54, 0x65, 0x73, 0x74, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x1a, 0x8c, 0x01, 0x0a, 0x17, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x45,
	0x6e, 0x75, 0x6d, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x5b, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x45,
	0x2e, 0x73, 0x71, 0x75, 0x61, 0x72, 0x65, 0x75, 0x70, 0x2e, 0x63, 0x61, 0x73, 0x68, 0x2e, 0x70,
	0x72, 0x61, 0x6e, 0x61, 0x64, 0x62, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x68, 0x65, 0x6e, 0x73, 0x69, 0x76,
	0x65, 0x54, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x54, 0x65, 0x73,
	0x74, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x22, 0x6d, 0x0a, 0x08, 0x54, 0x65, 0x73, 0x74, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x19, 0x0a, 0x15,
	0x54, 0x45, 0x53, 0x54, 0x5f, 0x45, 0x4e, 0x55, 0x4d, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43,
	0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x54, 0x45, 0x53, 0x54, 0x5f,
	0x45, 0x4e, 0x55, 0x4d, 0x5f, 0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x31, 0x10, 0x01, 0x12,
	0x16, 0x0a, 0x12, 0x54, 0x45, 0x53, 0x54, 0x5f, 0x45, 0x4e, 0x55, 0x4d, 0x5f, 0x4f, 0x50, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x32, 0x10, 0x02, 0x12, 0x16, 0x0a, 0x12, 0x54, 0x45, 0x53, 0x54, 0x5f,
	0x45, 0x4e, 0x55, 0x4d, 0x5f, 0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x33, 0x10, 0x03, 0x42,
	0x0d, 0x0a, 0x0b, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x22, 0xca,
	0x0c, 0x0a, 0x09, 0x54, 0x65, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x21, 0x0a, 0x0c,
	0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x0b, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12,
	0x1f, 0x0a, 0x0b, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x75, 0x69, 0x6e,
	0x74, 0x36, 0x34, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x6f, 0x6f, 0x6c,
	0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x62, 0x6f,
	0x6f, 0x6c, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x48, 0x0a, 0x0a, 0x65, 0x6e,
	0x75, 0x6d, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x29,
	0x2e, 0x73, 0x71, 0x75, 0x61, 0x72, 0x65, 0x75, 0x70, 0x2e, 0x63, 0x61, 0x73, 0x68, 0x2e, 0x70,
	0x72, 0x61, 0x6e, 0x61, 0x64, 0x62, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x09, 0x65, 0x6e, 0x75, 0x6d, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x62, 0x79, 0x74, 0x65, 0x73,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x57, 0x0a, 0x0c, 0x6e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x5f,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x73, 0x71,
	0x75, 0x61, 0x72, 0x65, 0x75, 0x70, 0x2e, 0x63, 0x61, 0x73, 0x68, 0x2e, 0x70, 0x72, 0x61, 0x6e,
	0x61, 0x64, 0x62, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31,
	0x2e, 0x54, 0x65, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x4e, 0x65, 0x73, 0x74, 0x65,
	0x64, 0x52, 0x0b, 0x6e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x32,
	0x0a, 0x15, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x09, 0x52, 0x13, 0x72,
	0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x12, 0x56, 0x0a, 0x0f, 0x72, 0x65, 0x63, 0x75, 0x72, 0x73, 0x69, 0x76, 0x65, 0x5f,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x73, 0x71,
	0x75, 0x61, 0x72, 0x65, 0x75, 0x70, 0x2e, 0x63, 0x61, 0x73, 0x68, 0x2e, 0x70, 0x72, 0x61, 0x6e,
	0x61, 0x64, 0x62, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31,
	0x2e, 0x52, 0x65, 0x63, 0x75, 0x72, 0x73, 0x69, 0x76, 0x65, 0x52, 0x0e, 0x72, 0x65, 0x63, 0x75,
	0x72, 0x73, 0x69, 0x76, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x1f, 0x0a, 0x0a, 0x6f, 0x6e,
	0x65, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00,
	0x52, 0x09, 0x6f, 0x6e, 0x65, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x1d, 0x0a, 0x09, 0x6f,
	0x6e, 0x65, 0x5f, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00,
	0x52, 0x08, 0x6f, 0x6e, 0x65, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x6b, 0x0a, 0x10, 0x73, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x61, 0x70, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x10,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x41, 0x2e, 0x73, 0x71, 0x75, 0x61, 0x72, 0x65, 0x75, 0x70, 0x2e,
	0x63, 0x61, 0x73, 0x68, 0x2e, 0x70, 0x72, 0x61, 0x6e, 0x61, 0x64, 0x62, 0x2e, 0x74, 0x65, 0x73,
	0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x73, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x4d, 0x61, 0x70, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0e, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x4d,
	0x61, 0x70, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x62, 0x0a, 0x0d, 0x69, 0x6e, 0x74, 0x5f, 0x6d,
	0x61, 0x70, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x11, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3e,
	0x2e, 0x73, 0x71, 0x75, 0x61, 0x72, 0x65, 0x75, 0x70, 0x2e, 0x63, 0x61, 0x73, 0x68, 0x2e, 0x70,
	0x72, 0x61, 0x6e, 0x61, 0x64, 0x62, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x76, 0x31, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x49, 0x6e,
	0x74, 0x4d, 0x61, 0x70, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b,
	0x69, 0x6e, 0x74, 0x4d, 0x61, 0x70, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x6e, 0x0a, 0x11, 0x6d,
	0x61, 0x70, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x18, 0x12, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x42, 0x2e, 0x73, 0x71, 0x75, 0x61, 0x72, 0x65, 0x75,
	0x70, 0x2e, 0x63, 0x61, 0x73, 0x68, 0x2e, 0x70, 0x72, 0x61, 0x6e, 0x61, 0x64, 0x62, 0x2e, 0x74,
	0x65, 0x73, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x65, 0x73, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x4d, 0x61, 0x70, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0f, 0x6d, 0x61, 0x70, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x4f, 0x0a, 0x0c, 0x69,
	0x6d, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x13, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2c, 0x2e, 0x73, 0x71, 0x75, 0x61, 0x72, 0x65, 0x75, 0x70, 0x2e, 0x63, 0x61, 0x73,
	0x68, 0x2e, 0x70, 0x72, 0x61, 0x6e, 0x61, 0x64, 0x62, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x52,
	0x0b, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x1a, 0x85, 0x02, 0x0a,
	0x06, 0x4e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x6e, 0x65, 0x73, 0x74, 0x65,
	0x64, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x6e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x34, 0x0a, 0x16,
	0x6e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x14, 0x6e, 0x65,
	0x73, 0x74, 0x65, 0x64, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x12, 0x62, 0x0a, 0x0a, 0x6e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x6d, 0x61, 0x70,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x43, 0x2e, 0x73, 0x71, 0x75, 0x61, 0x72, 0x65, 0x75,
	0x70, 0x2e, 0x63, 0x61, 0x73, 0x68, 0x2e, 0x70, 0x72, 0x61, 0x6e, 0x61, 0x64, 0x62, 0x2e, 0x74,
	0x65, 0x73, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x65, 0x73, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x4e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x2e, 0x4e, 0x65, 0x73,
	0x74, 0x65, 0x64, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x6e, 0x65, 0x73,
	0x74, 0x65, 0x64, 0x4d, 0x61, 0x70, 0x1a, 0x3c, 0x0a, 0x0e, 0x4e, 0x65, 0x73, 0x74, 0x65, 0x64,
	0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x1a, 0x41, 0x0a, 0x13, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x4d, 0x61,
	0x70, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3e, 0x0a, 0x10, 0x49, 0x6e, 0x74, 0x4d, 0x61,
	0x70, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x73, 0x0a, 0x14, 0x4d, 0x61, 0x70, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x45, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2f, 0x2e, 0x73, 0x71, 0x75, 0x61, 0x72, 0x65, 0x75, 0x70, 0x2e, 0x63, 0x61, 0x73, 0x68,
	0x2e, 0x70, 0x72, 0x61, 0x6e, 0x61, 0x64, 0x62, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x0d, 0x0a, 0x0b,
	0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x22, 0x86, 0x01, 0x0a, 0x09,
	0x52, 0x65, 0x63, 0x75, 0x72, 0x73, 0x69, 0x76, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x56, 0x0a, 0x0f,
	0x72, 0x65, 0x63, 0x75, 0x72, 0x73, 0x69, 0x76, 0x65, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x73, 0x71, 0x75, 0x61, 0x72, 0x65, 0x75, 0x70,
	0x2e, 0x63, 0x61, 0x73, 0x68, 0x2e, 0x70, 0x72, 0x61, 0x6e, 0x61, 0x64, 0x62, 0x2e, 0x74, 0x65,
	0x73, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x63, 0x75, 0x72,
	0x73, 0x69, 0x76, 0x65, 0x52, 0x0e, 0x72, 0x65, 0x63, 0x75, 0x72, 0x73, 0x69, 0x76, 0x65, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x22, 0x23, 0x0a, 0x0b, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x2a, 0x3c, 0x0a, 0x05, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x15, 0x0a, 0x11, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x55, 0x4e, 0x53, 0x50,
	0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x4f, 0x55,
	0x4e, 0x54, 0x5f, 0x4f, 0x4e, 0x45, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x4f, 0x55, 0x4e,
	0x54, 0x5f, 0x54, 0x57, 0x4f, 0x10, 0x02, 0x42, 0x47, 0x5a, 0x45, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x71, 0x75, 0x61, 0x72, 0x65, 0x75, 0x70, 0x2f, 0x70,
	0x72, 0x61, 0x6e, 0x61, 0x64, 0x62, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x73, 0x71,
	0x75, 0x61, 0x72, 0x65, 0x75, 0x70, 0x2f, 0x63, 0x61, 0x73, 0x68, 0x2f, 0x70, 0x72, 0x61, 0x6e,
	0x61, 0x64, 0x62, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_squareup_cash_pranadb_testproto_v1_testproto_proto_rawDescOnce sync.Once
	file_squareup_cash_pranadb_testproto_v1_testproto_proto_rawDescData = file_squareup_cash_pranadb_testproto_v1_testproto_proto_rawDesc
)

func file_squareup_cash_pranadb_testproto_v1_testproto_proto_rawDescGZIP() []byte {
	file_squareup_cash_pranadb_testproto_v1_testproto_proto_rawDescOnce.Do(func() {
		file_squareup_cash_pranadb_testproto_v1_testproto_proto_rawDescData = protoimpl.X.CompressGZIP(file_squareup_cash_pranadb_testproto_v1_testproto_proto_rawDescData)
	})
	return file_squareup_cash_pranadb_testproto_v1_testproto_proto_rawDescData
}

var file_squareup_cash_pranadb_testproto_v1_testproto_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_squareup_cash_pranadb_testproto_v1_testproto_proto_msgTypes = make([]protoimpl.MessageInfo, 13)
var file_squareup_cash_pranadb_testproto_v1_testproto_proto_goTypes = []interface{}{
	(Count)(0),                             // 0: squareup.cash.pranadb.testproto.v1.Count
	(ComprehensiveTestMessage_TestEnum)(0), // 1: squareup.cash.pranadb.testproto.v1.ComprehensiveTestMessage.TestEnum
	(*ComprehensiveTestMessage)(nil),       // 2: squareup.cash.pranadb.testproto.v1.ComprehensiveTestMessage
	(*TestTypes)(nil),                      // 3: squareup.cash.pranadb.testproto.v1.TestTypes
	(*Recursive)(nil),                      // 4: squareup.cash.pranadb.testproto.v1.Recursive
	(*SimpleValue)(nil),                    // 5: squareup.cash.pranadb.testproto.v1.SimpleValue
	nil,                                    // 6: squareup.cash.pranadb.testproto.v1.ComprehensiveTestMessage.MapStringIntFieldEntry
	nil,                                    // 7: squareup.cash.pranadb.testproto.v1.ComprehensiveTestMessage.MapIntStringFieldEntry
	nil,                                    // 8: squareup.cash.pranadb.testproto.v1.ComprehensiveTestMessage.MapStringRecursiveFieldEntry
	nil,                                    // 9: squareup.cash.pranadb.testproto.v1.ComprehensiveTestMessage.MapStringEnumFieldEntry
	(*TestTypes_Nested)(nil),               // 10: squareup.cash.pranadb.testproto.v1.TestTypes.Nested
	nil,                                    // 11: squareup.cash.pranadb.testproto.v1.TestTypes.StringMapFieldEntry
	nil,                                    // 12: squareup.cash.pranadb.testproto.v1.TestTypes.IntMapFieldEntry
	nil,                                    // 13: squareup.cash.pranadb.testproto.v1.TestTypes.MapMessageFieldEntry
	nil,                                    // 14: squareup.cash.pranadb.testproto.v1.TestTypes.Nested.NestedMapEntry
	(*Imported)(nil),                       // 15: squareup.cash.pranadb.testproto.v1.Imported
}
var file_squareup_cash_pranadb_testproto_v1_testproto_proto_depIdxs = []int32{
	1,  // 0: squareup.cash.pranadb.testproto.v1.ComprehensiveTestMessage.enum_field:type_name -> squareup.cash.pranadb.testproto.v1.ComprehensiveTestMessage.TestEnum
	2,  // 1: squareup.cash.pranadb.testproto.v1.ComprehensiveTestMessage.recursive_field:type_name -> squareup.cash.pranadb.testproto.v1.ComprehensiveTestMessage
	2,  // 2: squareup.cash.pranadb.testproto.v1.ComprehensiveTestMessage.oneof_recursive_field:type_name -> squareup.cash.pranadb.testproto.v1.ComprehensiveTestMessage
	6,  // 3: squareup.cash.pranadb.testproto.v1.ComprehensiveTestMessage.map_string_int_field:type_name -> squareup.cash.pranadb.testproto.v1.ComprehensiveTestMessage.MapStringIntFieldEntry
	7,  // 4: squareup.cash.pranadb.testproto.v1.ComprehensiveTestMessage.map_int_string_field:type_name -> squareup.cash.pranadb.testproto.v1.ComprehensiveTestMessage.MapIntStringFieldEntry
	8,  // 5: squareup.cash.pranadb.testproto.v1.ComprehensiveTestMessage.map_string_recursive_field:type_name -> squareup.cash.pranadb.testproto.v1.ComprehensiveTestMessage.MapStringRecursiveFieldEntry
	9,  // 6: squareup.cash.pranadb.testproto.v1.ComprehensiveTestMessage.map_string_enum_field:type_name -> squareup.cash.pranadb.testproto.v1.ComprehensiveTestMessage.MapStringEnumFieldEntry
	2,  // 7: squareup.cash.pranadb.testproto.v1.ComprehensiveTestMessage.repeated_recursive_field:type_name -> squareup.cash.pranadb.testproto.v1.ComprehensiveTestMessage
	0,  // 8: squareup.cash.pranadb.testproto.v1.TestTypes.enum_field:type_name -> squareup.cash.pranadb.testproto.v1.Count
	10, // 9: squareup.cash.pranadb.testproto.v1.TestTypes.nested_field:type_name -> squareup.cash.pranadb.testproto.v1.TestTypes.Nested
	4,  // 10: squareup.cash.pranadb.testproto.v1.TestTypes.recursive_field:type_name -> squareup.cash.pranadb.testproto.v1.Recursive
	11, // 11: squareup.cash.pranadb.testproto.v1.TestTypes.string_map_field:type_name -> squareup.cash.pranadb.testproto.v1.TestTypes.StringMapFieldEntry
	12, // 12: squareup.cash.pranadb.testproto.v1.TestTypes.int_map_field:type_name -> squareup.cash.pranadb.testproto.v1.TestTypes.IntMapFieldEntry
	13, // 13: squareup.cash.pranadb.testproto.v1.TestTypes.map_message_field:type_name -> squareup.cash.pranadb.testproto.v1.TestTypes.MapMessageFieldEntry
	15, // 14: squareup.cash.pranadb.testproto.v1.TestTypes.import_field:type_name -> squareup.cash.pranadb.testproto.v1.Imported
	4,  // 15: squareup.cash.pranadb.testproto.v1.Recursive.recursive_field:type_name -> squareup.cash.pranadb.testproto.v1.Recursive
	2,  // 16: squareup.cash.pranadb.testproto.v1.ComprehensiveTestMessage.MapStringRecursiveFieldEntry.value:type_name -> squareup.cash.pranadb.testproto.v1.ComprehensiveTestMessage
	1,  // 17: squareup.cash.pranadb.testproto.v1.ComprehensiveTestMessage.MapStringEnumFieldEntry.value:type_name -> squareup.cash.pranadb.testproto.v1.ComprehensiveTestMessage.TestEnum
	14, // 18: squareup.cash.pranadb.testproto.v1.TestTypes.Nested.nested_map:type_name -> squareup.cash.pranadb.testproto.v1.TestTypes.Nested.NestedMapEntry
	5,  // 19: squareup.cash.pranadb.testproto.v1.TestTypes.MapMessageFieldEntry.value:type_name -> squareup.cash.pranadb.testproto.v1.SimpleValue
	20, // [20:20] is the sub-list for method output_type
	20, // [20:20] is the sub-list for method input_type
	20, // [20:20] is the sub-list for extension type_name
	20, // [20:20] is the sub-list for extension extendee
	0,  // [0:20] is the sub-list for field type_name
}

func init() { file_squareup_cash_pranadb_testproto_v1_testproto_proto_init() }
func file_squareup_cash_pranadb_testproto_v1_testproto_proto_init() {
	if File_squareup_cash_pranadb_testproto_v1_testproto_proto != nil {
		return
	}
	file_squareup_cash_pranadb_testproto_v1_imports_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_squareup_cash_pranadb_testproto_v1_testproto_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ComprehensiveTestMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_squareup_cash_pranadb_testproto_v1_testproto_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestTypes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_squareup_cash_pranadb_testproto_v1_testproto_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Recursive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_squareup_cash_pranadb_testproto_v1_testproto_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SimpleValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_squareup_cash_pranadb_testproto_v1_testproto_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestTypes_Nested); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_squareup_cash_pranadb_testproto_v1_testproto_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*ComprehensiveTestMessage_OneofInt64Field)(nil),
		(*ComprehensiveTestMessage_OneofBoolField)(nil),
		(*ComprehensiveTestMessage_OneofStringField)(nil),
		(*ComprehensiveTestMessage_OneofRecursiveField)(nil),
	}
	file_squareup_cash_pranadb_testproto_v1_testproto_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*TestTypes_OneString)(nil),
		(*TestTypes_OneInt64)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_squareup_cash_pranadb_testproto_v1_testproto_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   13,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_squareup_cash_pranadb_testproto_v1_testproto_proto_goTypes,
		DependencyIndexes: file_squareup_cash_pranadb_testproto_v1_testproto_proto_depIdxs,
		EnumInfos:         file_squareup_cash_pranadb_testproto_v1_testproto_proto_enumTypes,
		MessageInfos:      file_squareup_cash_pranadb_testproto_v1_testproto_proto_msgTypes,
	}.Build()
	File_squareup_cash_pranadb_testproto_v1_testproto_proto = out.File
	file_squareup_cash_pranadb_testproto_v1_testproto_proto_rawDesc = nil
	file_squareup_cash_pranadb_testproto_v1_testproto_proto_goTypes = nil
	file_squareup_cash_pranadb_testproto_v1_testproto_proto_depIdxs = nil
}
