// Example Prana server configuration file
// Please note that NodeID is not specified in the config file, it is specified on the command line. This allows you to use
// the same config file for each node in the cluster

cluster-id = 1 // Each node in the same Prana cluster must have the same ClusterID, there can be multiple Prana clusters on your network

// RaftAddresses are the addresses used by Dragonboat to form Raft clusters. They can be local to your network
raft-addresses = [
  "localhost:63201",
  "localhost:63202",
  "localhost:63203"
]

// Each node of the cluster listens for notifications from other nodes - these are the addresses they listen at. They can be local to your network
notif-listen-addresses = [
  "localhost:63301",
  "localhost:63302",
  "localhost:63303"
]

// These are the addresses the API server listens at on each node - these is used for connecting from clients. They need to be accessible from the client.
api-server-listen-addresses = [
  "localhost:6584",
  "localhost:6585",
  "localhost:6586"
]

num-shards         = 30 // The total number of shards in the cluster
replication-factor = 3 // The number of replicas - each write will be replicated to this many replicas
data-dir           = "prana-data" // The base directory for storing data

// KafkaBrokers are the config for the Kafka brokers used by Prana
// - a map of broker name (a string) to the broker config
kafka-brokers = {
  testbroker = {
    client-type = 2, // Client type determines which Kafka client library is used
    properties  = {
      // Properties get passed through to the client library
      "bootstrap.servers": "localhost:9092"
    }
  }
}

// Logging config
log-level = "trace"
log-format = "json"

// It is less likely you will want to change these settings

test-server                       = false // For a real server always set to false
data-snapshot-entries             = 10000 // The number of data writes before a snapshot is triggered
data-compaction-overhead          = 2500 // After a snapshot is taken how many writes to retain for main data
sequence-snapshot-entries         = 1000 // The number of sequence writes before a snapshot is triggered
sequence-compaction-overhead      = 250 // After a snapshot is taken how many writes to retain for sequences
locks-snapshot-entries            = 1000 // The number of lock writes before a snapshot is triggered
locks-compaction-overhead         = 250 // After a snapshot is taken how many writes to retain for locks
remoting-heartbeat-interval       = "10s" // Amount of time between remoting heartbeats
remoting-heartbeat-timeout        = "5s" // Timeout for a remoting heartbeat
enable-api-server                 = true // Set to true to enable the API server - needed for CLI access
raft-rtt-ms                       = 50 // The size of a Raft RTT unit in ms
raft-heartbeat-rtt                = 30 // The Raft heartbeat period in units of raft-rtt-ms
raft-election-rtt                 = 300 // The Raft election period in units of raft-rtt-ms